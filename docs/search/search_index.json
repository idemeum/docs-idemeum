{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Let's begin your passwordless journey \u00b6 idemeum is a passwordless and private identity platform. Basically, it is a drop in SDK to make your mobile and web apps passwordless. One SDK, couple hours of your time, and you can delight your users with seamless and simple login experience. How is idemeum different? \u00b6 Passwordless \u00b6 We are passionate about passwordless. That is why we built an all-in-one SDK to eliminate passwords. You choose how you wan to log your users in - with one-click , biometric , or QR-code . Private \u00b6 Your users' data is none of our business. With client side encryption and privacy from ground up we enable your users to own and control their digital identity. We do not want to be yet another 3rd party sucking in your data. User centric \u00b6 We designed idemeum to remove login friction. With features Single Sign-on across domains we want your users to not even notice that they are in fact signing up and logging in. Seeing is believing, try our live demo . Quick links \u00b6 Get started with idemeum using our quick links or navigating the menu. Explore SDKs Explore idemeum SDKs to enable passwordless auth for your apps. Live idemeum demo Try one-click, biometric, and mobile login flows with our demo app. About security Learn how idemeum app secures your users' data.","title":"Welcome"},{"location":"#lets-begin-your-passwordless-journey","text":"idemeum is a passwordless and private identity platform. Basically, it is a drop in SDK to make your mobile and web apps passwordless. One SDK, couple hours of your time, and you can delight your users with seamless and simple login experience.","title":"Let's begin your passwordless journey"},{"location":"#how-is-idemeum-different","text":"","title":"How is idemeum different?"},{"location":"#passwordless","text":"We are passionate about passwordless. That is why we built an all-in-one SDK to eliminate passwords. You choose how you wan to log your users in - with one-click , biometric , or QR-code .","title":"Passwordless"},{"location":"#private","text":"Your users' data is none of our business. With client side encryption and privacy from ground up we enable your users to own and control their digital identity. We do not want to be yet another 3rd party sucking in your data.","title":"Private"},{"location":"#user-centric","text":"We designed idemeum to remove login friction. With features Single Sign-on across domains we want your users to not even notice that they are in fact signing up and logging in. Seeing is believing, try our live demo .","title":"User centric"},{"location":"#quick-links","text":"Get started with idemeum using our quick links or navigating the menu.","title":"Quick links"},{"location":"azuread/","text":"Integrate idemeum with Azure AD (B2B) \u00b6 .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure O365? \u00b6 idemeum integrates with Azure Active Directory (AAD) directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO and O365 resources. No enrollment, no user sync, easy and simple. idemeum supports cloud-only as well as hybrid deployment models. How is O365 deployed? \u00b6 O365 and Azure Active Directory (AAD) can be implemented with various deployment models . Deployment model Definition Cloud only identity User account only exists in the Azure AD tenant for your Microsoft 365 subscription. Hybrid identity User account exists in AD DS and a copy is also in the Azure AD tenant for your Microsoft 365 subscription. The user account in Azure AD might also include a hashed version of the already hashed AD DS user account password. For authentication there are several options: password hash synchronization , pass-through authentication , and federation with ADFS . How is idemeum integrated with O365? \u00b6 idemeum can be federated directly with AAD using SAML protocol. When federating directly with Azure AD, idemeum can support cloud only as well as hybrid (password sync and pass-through) models. Integrate idemeum with Azure AD \u00b6 We are going to go through simple three steps to integrate idemeum with your Microsoft identity environment. Request idemeum tenant Configure Azure AD for federation Test user sign-in All additional Microsoft documentation and useful links can be found in footnotes . \u2699\ufe0f 1. Request idemeum tenant \u00b6 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Azure AD. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result of tenant provisioning we will share the configuration details with you, so that you can later use them in your Azure AD configuration: $LogOnUrl - SAML LogOn URL. $LogOffUrl - SAML LogOff URL. $SigningCert - signing certificate to establish federation trust. $IssuerUri - URI to identify idemeum in SAML responses. Tip You can always get this and additional information from your SAML metadata XML file. You can access this information by using the following link https://<your tenant name>/api/saml/metadata/idp.xml . Replace [your tenant name] with your actual tenant name that we will provision for you. \ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc 2. Configure Azure AD for federation \u00b6 After signing up for Office 365, the only domain associated with your account is the onmicrosoft.com subdomain chosen during registration (for example, contoso.onmicrosoft.com ). To allow users to SSO to Azure AD and Office 365, it is recommended to have another domain added to the environment. If you already have such domain added and verified, you can always use that. Make sure you have admin account with another domain Once you configure Azure AD domain to be federated, you will no longer be able to use local login into accounts associated with that domain. Therefore, if something is wrong with the configuration, you might lock yourself out. To prevent that, make sure you have admin account created on other domain (for instance on your onmicrosoft.com domain), so that you can always use that account to log in and revert federation configuration. We will be using PowerShell to configure the Azure AD domain for federation 1 . Launch PowerShell on a Windows machine Install MSOnline PowerShell module if you have not already 1 Install-Module MSOnline Connect to MSOnline service. You will need to authenticate with your Azure AD Portal admin credentials 1 Connect-MsolService You can check your existing domains and their federation settings 1 Get-MsolDomain Check your current domain federation settings. If the current setting is federated , you will need to first convert domain to `managed' setting 1 Get-MsolDomainFederationSettings 1 Set-MsolDomainAuthentication -DomainName < yourdomain > -Authentication managed Now you can configure your domain with federation settings. Take a look at the example below. $Domain - the domain that you are planning to federate with idemeum $BrandName - the name that you will use for federation $LogOnUrl - this is a SAML LogOn URL. We will share this URL with you as part of onboarding. $LogOffUrl - this is a SAML LogOff URL. We will share this URL with you as part of onboarding $SigningCert - signing certificate to establish federation trust. We will share this certificate with you as part of onboarding. $IssuerUri - URI that identifies idemeum as SAML issuer. $Protocol - protocol to use for federation. In our case it is SAML 1 2 3 4 5 6 7 8 9 $Domain = \"idemeumlab.com\" $BrandName = \"idemeum\" $LogOnUrl = \"https://myhospital.idemeum.com/api/saml/sso\" $LogOffUrl = \"https://myhospital.idemeum.com/api/saml/slo\" $SigningCert = \"MIIC9DCCAdygAwIBAgIIPKj+xeu3fLQwDQYJKoZIhvcNAQELBQAwOjEMMAoGA1UEBhMDVVNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFjAUBgNVBAMMDSouaWRlbWV1bS5jb20wHhcNMjAxMjI5MjMwMjUxWhcNMzAxMjI3MjMwMjUxWjA6MQwwCgYDVQQGEwNVU0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEWMBQGA1UEAwwNKi5pZGVtZXVtLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIVX288afPVD2Xhr+Zmc0BCbCVZumwYOFAjp659jytT8kpBuGXdu7A6CYE7CxVc4NeiwaDmteNp3x1INDBS+TSfHkWCNh+6sUhY4jyZVajuGJOCna4+NB2GLx4hl9+AzjfzKQBTT7CNoDLfGvE8ZtUdItCYrBIG8q37Z/2D3zLS90bmomQEGTzy45ckZ1+Q0nyHEikj3hrqUVotTr0ivylmRLj0Qnup3Eh0s8l5Lvb9VYauhL4KyqVqFnYv57Qg22+d6ZOCn6at6AiZbG8wlF5d/uppu6l3rigSKOFewK9rVwhGxTbgP2JZeCdXuDs5+d6b6zS0dfSQpgzyEy/Jmw0CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWVG0ufqrF9oBYCBzm68i2di2IuEMhF2gW5ixcVgjfLLpnFrT0Lkt4taF+32ykNU9kram/SjSHF2+hJoBZ4BBQYIMXyA9TFn1bcn7LOq8uiDS/cF9noHlYrxOboq0qc38R4wkjSOEOFhs98zhRz2IPUccvwgfoiQZS3lt12Gb8KcZPaGKVnoxunpe7mQj69WkiKgBJLR2G4ODIX+FY01zwz7coplqYMOohTgOV/ej1BloWVWHFTkXKDtIgeuyQWGnJ3gBjDzmB5XwxvxA0NNCZVzhO23S0z/rn8eqKQ6obkabZUILurOeBC4wKEH314sbtOIP0NTI+Xc5LpbOwonhVQ==\" $IssuerUri = \"https://myhospital.idemeum.com/api/saml/metadata/idp.xml\" $Protocol = \"SAMLP\" Set-MsolDomainAuthentication -DomainName $Domain -FederationBrandName $BrandName -Authentication federated -PassiveLogOnUri $LogOnUrl -SigningCertificate $SigningCert -IssuerUri $IssuerUri -LogOffUri $LogOffUrl -PreferredAuthenticationProtocol $Protocol Verify that the settings are successfully configured for your domain. 1 Get-MsolDomainFederationSettings -DomainName < your domain here > | format-list * \ud83e\uddea 3. Test user sign in \u00b6 Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to portal.office.com Enter the email address of the account that you would like to sign into. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to office 365. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your O365 deployment with passwordless authentication. Microsoft documentation - Configure SAML federation provider \u21a9 Azure AD SAML metadata \u21a9 MSOnline reference documentation \u21a9 Contact idemeum for any support questions \u21a9","title":"Azure AD (B2B)"},{"location":"azuread/#integrate-idemeum-with-azure-ad-b2b","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":" Integrate idemeum with Azure AD (B2B)"},{"location":"azuread/#how-can-idemeum-help-secure-o365","text":"idemeum integrates with Azure Active Directory (AAD) directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO and O365 resources. No enrollment, no user sync, easy and simple. idemeum supports cloud-only as well as hybrid deployment models.","title":"How can idemeum help secure O365?"},{"location":"azuread/#how-is-o365-deployed","text":"O365 and Azure Active Directory (AAD) can be implemented with various deployment models . Deployment model Definition Cloud only identity User account only exists in the Azure AD tenant for your Microsoft 365 subscription. Hybrid identity User account exists in AD DS and a copy is also in the Azure AD tenant for your Microsoft 365 subscription. The user account in Azure AD might also include a hashed version of the already hashed AD DS user account password. For authentication there are several options: password hash synchronization , pass-through authentication , and federation with ADFS .","title":"How is O365 deployed?"},{"location":"azuread/#how-is-idemeum-integrated-with-o365","text":"idemeum can be federated directly with AAD using SAML protocol. When federating directly with Azure AD, idemeum can support cloud only as well as hybrid (password sync and pass-through) models.","title":"How is idemeum integrated with O365?"},{"location":"azuread/#integrate-idemeum-with-azure-ad","text":"We are going to go through simple three steps to integrate idemeum with your Microsoft identity environment. Request idemeum tenant Configure Azure AD for federation Test user sign-in All additional Microsoft documentation and useful links can be found in footnotes .","title":"Integrate idemeum with Azure AD"},{"location":"azuread/#1-request-idemeum-tenant","text":"As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Azure AD. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result of tenant provisioning we will share the configuration details with you, so that you can later use them in your Azure AD configuration: $LogOnUrl - SAML LogOn URL. $LogOffUrl - SAML LogOff URL. $SigningCert - signing certificate to establish federation trust. $IssuerUri - URI to identify idemeum in SAML responses. Tip You can always get this and additional information from your SAML metadata XML file. You can access this information by using the following link https://<your tenant name>/api/saml/metadata/idp.xml . Replace [your tenant name] with your actual tenant name that we will provision for you.","title":"\u2699\ufe0f 1. Request idemeum tenant"},{"location":"azuread/#2-configure-azure-ad-for-federation","text":"After signing up for Office 365, the only domain associated with your account is the onmicrosoft.com subdomain chosen during registration (for example, contoso.onmicrosoft.com ). To allow users to SSO to Azure AD and Office 365, it is recommended to have another domain added to the environment. If you already have such domain added and verified, you can always use that. Make sure you have admin account with another domain Once you configure Azure AD domain to be federated, you will no longer be able to use local login into accounts associated with that domain. Therefore, if something is wrong with the configuration, you might lock yourself out. To prevent that, make sure you have admin account created on other domain (for instance on your onmicrosoft.com domain), so that you can always use that account to log in and revert federation configuration. We will be using PowerShell to configure the Azure AD domain for federation 1 . Launch PowerShell on a Windows machine Install MSOnline PowerShell module if you have not already 1 Install-Module MSOnline Connect to MSOnline service. You will need to authenticate with your Azure AD Portal admin credentials 1 Connect-MsolService You can check your existing domains and their federation settings 1 Get-MsolDomain Check your current domain federation settings. If the current setting is federated , you will need to first convert domain to `managed' setting 1 Get-MsolDomainFederationSettings 1 Set-MsolDomainAuthentication -DomainName < yourdomain > -Authentication managed Now you can configure your domain with federation settings. Take a look at the example below. $Domain - the domain that you are planning to federate with idemeum $BrandName - the name that you will use for federation $LogOnUrl - this is a SAML LogOn URL. We will share this URL with you as part of onboarding. $LogOffUrl - this is a SAML LogOff URL. We will share this URL with you as part of onboarding $SigningCert - signing certificate to establish federation trust. We will share this certificate with you as part of onboarding. $IssuerUri - URI that identifies idemeum as SAML issuer. $Protocol - protocol to use for federation. In our case it is SAML 1 2 3 4 5 6 7 8 9 $Domain = \"idemeumlab.com\" $BrandName = \"idemeum\" $LogOnUrl = \"https://myhospital.idemeum.com/api/saml/sso\" $LogOffUrl = \"https://myhospital.idemeum.com/api/saml/slo\" $SigningCert = \"MIIC9DCCAdygAwIBAgIIPKj+xeu3fLQwDQYJKoZIhvcNAQELBQAwOjEMMAoGA1UEBhMDVVNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFjAUBgNVBAMMDSouaWRlbWV1bS5jb20wHhcNMjAxMjI5MjMwMjUxWhcNMzAxMjI3MjMwMjUxWjA6MQwwCgYDVQQGEwNVU0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEWMBQGA1UEAwwNKi5pZGVtZXVtLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIVX288afPVD2Xhr+Zmc0BCbCVZumwYOFAjp659jytT8kpBuGXdu7A6CYE7CxVc4NeiwaDmteNp3x1INDBS+TSfHkWCNh+6sUhY4jyZVajuGJOCna4+NB2GLx4hl9+AzjfzKQBTT7CNoDLfGvE8ZtUdItCYrBIG8q37Z/2D3zLS90bmomQEGTzy45ckZ1+Q0nyHEikj3hrqUVotTr0ivylmRLj0Qnup3Eh0s8l5Lvb9VYauhL4KyqVqFnYv57Qg22+d6ZOCn6at6AiZbG8wlF5d/uppu6l3rigSKOFewK9rVwhGxTbgP2JZeCdXuDs5+d6b6zS0dfSQpgzyEy/Jmw0CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWVG0ufqrF9oBYCBzm68i2di2IuEMhF2gW5ixcVgjfLLpnFrT0Lkt4taF+32ykNU9kram/SjSHF2+hJoBZ4BBQYIMXyA9TFn1bcn7LOq8uiDS/cF9noHlYrxOboq0qc38R4wkjSOEOFhs98zhRz2IPUccvwgfoiQZS3lt12Gb8KcZPaGKVnoxunpe7mQj69WkiKgBJLR2G4ODIX+FY01zwz7coplqYMOohTgOV/ej1BloWVWHFTkXKDtIgeuyQWGnJ3gBjDzmB5XwxvxA0NNCZVzhO23S0z/rn8eqKQ6obkabZUILurOeBC4wKEH314sbtOIP0NTI+Xc5LpbOwonhVQ==\" $IssuerUri = \"https://myhospital.idemeum.com/api/saml/metadata/idp.xml\" $Protocol = \"SAMLP\" Set-MsolDomainAuthentication -DomainName $Domain -FederationBrandName $BrandName -Authentication federated -PassiveLogOnUri $LogOnUrl -SigningCertificate $SigningCert -IssuerUri $IssuerUri -LogOffUri $LogOffUrl -PreferredAuthenticationProtocol $Protocol Verify that the settings are successfully configured for your domain. 1 Get-MsolDomainFederationSettings -DomainName < your domain here > | format-list *","title":"\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc 2. Configure Azure AD for federation"},{"location":"azuread/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to portal.office.com Enter the email address of the account that you would like to sign into. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to office 365. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your O365 deployment with passwordless authentication. Microsoft documentation - Configure SAML federation provider \u21a9 Azure AD SAML metadata \u21a9 MSOnline reference documentation \u21a9 Contact idemeum for any support questions \u21a9","title":"\ud83e\uddea 3. Test user sign in"},{"location":"gethelp/","text":"We are always here to help \u00b6 Do not hesitate to reach out with any questions, and we are always looking forward to hear product feedback so that we can make idemeum better. support@idemeum.com - drop us a note. Slack channel - join our Slack channel. We will message new product updates and just share our knowledge about the world of identity.","title":"Help"},{"location":"gethelp/#we-are-always-here-to-help","text":"Do not hesitate to reach out with any questions, and we are always looking forward to hear product feedback so that we can make idemeum better. support@idemeum.com - drop us a note. Slack channel - join our Slack channel. We will message new product updates and just share our knowledge about the world of identity.","title":"We are always here to help"},{"location":"google/","text":"Integrate idemeum with Google workspace \u00b6 .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Google Workspace deployments? \u00b6 idemeum integrates with Google Cloud Identity directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. How does the integration work? \u00b6 idemeum integrates with Google Cloud Identity in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active or LDAP directory, or deploy any additional servers and connectors. Simply federate your Google Cloud Identity tenant with idemeum over SAML protocol. \ud83d\udc68\u200d\ud83d\udcbb In the diagram above, we see the deployment where Google Cloud Identity is deployed as a primary IDP and all applications are federated directly with it. When user is trying to authenticate to any corporate application or Google Workspace, the sign in request is sent first to Google Cloud Identity, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Google Cloud Identity, which in turn forwards that user information to federated application. As a result users can access application without any passwords. Integrate idemeum with Google Cloud Identity \u00b6 We are going to go through simple three steps to integrate idemeum with your Google Workspace environment. Request idemeum tenant Configure Google Cloud Identity for federation Test user sign-in 1. \ud83e\udd1d Request idemeum tenant \u00b6 \ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Google Workspace. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result, we will share the following with you: IdP Single Sign-On URL - you will need this URI to configure Google Cloud Identity federation with idemeum. This is the URL where Google Cloud Identity will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Google Cloud Identity and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file. 2. \u2699\ufe0f Configure Google Cloud Identity for federation \u00b6 Sign in to your Google Workspace Admin portal Navigate to Security , scroll down and find the section Set up single sign-on (SSO) with a third party IdP . Click on that section to set up idemeum as 3rd party IDP. Configure the following settings: Set up SSO with third-party identity provider - enable checkbox Sign-in page URL - enter the URL that we shared with you after tenant creation. You can always get that data from your idemeum SAML XML file. Sign-out page URL - enter https://accounts.google.com Verification certificate - upload the certificate that we shared with you. You can always get that data from your idemeum SAML XML file. Leave other fields blank. Click Save At this point you configured idemeum to become 3rd party IDP for Google Cloud Identity, and all authentication requests for your domain will be redirected to idemeum. Note Authentication for admin console with Admin credentials is still handled by Google Cloud identity. All you need to do it to navigate to https://admin.google.com/u/0/ac/home and login with your admin credentials. Please refer to documentation here . 3. \ud83e\uddea Test user sign-in \u00b6 Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your accounts.google.com/ . Enter your email address with you domain, and you will be redirected to idemeum for sign in. You will need to scan QR code with idemeum app. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Google Workspace application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Google Workspace deployment with passwordless multi-factor authentication. Set up SSO via a third party Identity provider \u21a9 Understanding SAML secure sign-in \u21a9 SSO assertion requirements \u21a9","title":"Google Cloud Identity"},{"location":"google/#integrate-idemeum-with-google-workspace","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":" Integrate idemeum with Google workspace"},{"location":"google/#how-can-idemeum-help-secure-google-workspace-deployments","text":"idemeum integrates with Google Cloud Identity directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple.","title":"How can idemeum help secure Google Workspace deployments?"},{"location":"google/#how-does-the-integration-work","text":"idemeum integrates with Google Cloud Identity in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active or LDAP directory, or deploy any additional servers and connectors. Simply federate your Google Cloud Identity tenant with idemeum over SAML protocol. \ud83d\udc68\u200d\ud83d\udcbb In the diagram above, we see the deployment where Google Cloud Identity is deployed as a primary IDP and all applications are federated directly with it. When user is trying to authenticate to any corporate application or Google Workspace, the sign in request is sent first to Google Cloud Identity, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Google Cloud Identity, which in turn forwards that user information to federated application. As a result users can access application without any passwords.","title":"How does the integration work?"},{"location":"google/#integrate-idemeum-with-google-cloud-identity","text":"We are going to go through simple three steps to integrate idemeum with your Google Workspace environment. Request idemeum tenant Configure Google Cloud Identity for federation Test user sign-in","title":"Integrate idemeum with Google Cloud Identity"},{"location":"google/#1-request-idemeum-tenant","text":"\ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Google Workspace. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result, we will share the following with you: IdP Single Sign-On URL - you will need this URI to configure Google Cloud Identity federation with idemeum. This is the URL where Google Cloud Identity will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Google Cloud Identity and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file.","title":"1. \ud83e\udd1d Request idemeum tenant"},{"location":"google/#2-configure-google-cloud-identity-for-federation","text":"Sign in to your Google Workspace Admin portal Navigate to Security , scroll down and find the section Set up single sign-on (SSO) with a third party IdP . Click on that section to set up idemeum as 3rd party IDP. Configure the following settings: Set up SSO with third-party identity provider - enable checkbox Sign-in page URL - enter the URL that we shared with you after tenant creation. You can always get that data from your idemeum SAML XML file. Sign-out page URL - enter https://accounts.google.com Verification certificate - upload the certificate that we shared with you. You can always get that data from your idemeum SAML XML file. Leave other fields blank. Click Save At this point you configured idemeum to become 3rd party IDP for Google Cloud Identity, and all authentication requests for your domain will be redirected to idemeum. Note Authentication for admin console with Admin credentials is still handled by Google Cloud identity. All you need to do it to navigate to https://admin.google.com/u/0/ac/home and login with your admin credentials. Please refer to documentation here .","title":"2. \u2699\ufe0f Configure Google Cloud Identity for federation"},{"location":"google/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your accounts.google.com/ . Enter your email address with you domain, and you will be redirected to idemeum for sign in. You will need to scan QR code with idemeum app. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Google Workspace application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Google Workspace deployment with passwordless multi-factor authentication. Set up SSO via a third party Identity provider \u21a9 Understanding SAML secure sign-in \u21a9 SSO assertion requirements \u21a9","title":"3. \ud83e\uddea Test user sign-in"},{"location":"okta/","text":"Integrate idemeum with Okta \u00b6 .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Okta deployments? \u00b6 idemeum integrates with Okta directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. Verified log in idemeum has built in document verification. When integrated with Okta, idemeum can log in users not just using their email address, but also verified first name and last name, whereby making every login trusted and verified and reducing identity fraud. How does the integration work? \u00b6 idemeum integrates with Okta in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Okta tenant with idemeum over SAML protocol. In the diagram above, we see the deployment where Okta is deployed as a primary IDP and all applications are federated directly with Okta. When user is trying to authenticate to any corporate application, the sign in request is sent first to Okta, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Okta, which in turn forwards that user information to federated application. As a result users can access application without any passwords. idemeum differentiation The key difference to note here is that you can configure idemeum to release not just email, but also first name and last name for employee. When all these claims are processed for authentication, the match is done not just with email but with verified ID document information. Therefore, every login becomes trusted. Integrate idemeum with Okta \u00b6 We are going to go through simple four steps to integrate idemeum with your Okta identity environment. Request idemeum tenant Set up verified login (optional) Configure Okta for federation Test user sign-in 1. \ud83e\udd1d Request idemeum tenant \u00b6 \ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Okta and whether you want to use verified login or not. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. Okta SAML IDP metadata - we will need your Okta IDP metadata file, so that we can configure SAML trust on our end. As a result, we will share the following with you: IDP issuer URI - you will need this URI to configure Okta federation with idemeum. This URI can always be extracted from your idemeum SAML metadata file. IdP Single Sign-On URL - you will need this URI to configure Okta federation with idemeum. This is the URL where Okta will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Okta and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file. 2. \u2714\ufe0f Set up verified login \u00b6 This step is optional. You can login your users and match the account using only email address. This is what most of the commercial identity solutions do today. However, idemeum offers an opportunity to increase identity trust and login your users with not just email, but a combination of email + firstName + lastName . To make it work, we will need to create a custom attribute for Okta users, say verifiedIdentity and populate it with a combination of email + firstName + lastName. When idemeum will return verified user claims, Okta will match them against this custom attribute. In this case we are going to be working with Active Directory users that you are synchronizing to Okta tenant. Login to your Okta tenant with admin account Navigate to Directory -> Profile editor Choose User(default) profile, click Add Attribute and create custom attribute that you will be using for user matching. In our case we are creating an attribute with the display name Verified Identity and variable name verifiedIdentity . We are not making this attribute required. Now navigate to Directory -> Profile editor and then choose your Active Directory integration and click Mappings . Scroll all the way down to find custom attribute that we created. And now create a custom mapping for this attribute. 1 toLowerCase ( appuser . firstName ) + '_' + toLowerCase ( appuser . lastName ) + '_' + toLowerCase ( appuser . email ) Info What this means is that when users will be synced from Active Directory, Okta will take a combination of firstName + lastName + email and will populate that combination into our custom attribute verifiedIdentity . At this point we have configured everything necessary to perform verified login with claims passed from idemeum. Now we can move to the next step of configuring SAML federation between Okta and idemeum. Tip At this point you will need to force sync users from Active Directory to make sure custom attributes get populated for all your existing or new users. 3. \u2699\ufe0f Configure Okta for federation \u00b6 Configure 3rd party IDP \u00b6 Navigate to Security -> Identity Providers -> Add Identity Provider -> Add SAML 2.0 IDP Let's configure the following options. Name - assign a name to your IDP, for example idemeum SAML IDP username - create custom string for this attribute 1 String . toLowerCase ( idpuser . firstName ) + '_' + String . toLowerCase ( idpuser . lastName ) + '_' + idpuser . email Match against - choose the display name of the custom attribute your created in the previous section. Account Link Policy - choose Automatic Account Link Restriction - choose None If match not found - choose Redirect to Okta sign-in page IDP issuer URI - enter the URI that we shared with you. You will always have that available in your idemeum metadata file. IdP Single Sign-On URL - enter the URL that we shared with you. You will always have that available in your idemeum metadata file. IdP Signature Certificate - enter the certificate that we shared with you. You will always have that available in your idemeum metadata file. Request Binding - make sure you have HTTP POST selected. You can leave other parameters with default settings. Save your identity provider configuration. Return to Identity Providers section, expand the details of the identity provider you just created by clicking on the arrow next to IDP name, download metadata file and share with our support team . We will need this information to establish trust between your Okta tenant and idemeum. At this point you created identity provider in Okta to federate all authentication requests with idemeum. As a next step you need to apply this identity provider in Okta Routing Rules. Configure routing rule \u00b6 Navigate to Security -> Identity Providers -> Routing Rules . In this case we are going to create a new routing rule for passwordless authentication. As you can see we are keeping default configuration, but we are using our idemeum SAML identity provider for authentication. Warning Once you enable a routing rule, all authentication requests will be redirected to idemeum. If for any reason the idemeum authentication does not work, and you need to log into Okta admin account with username and password, you can always use the backdoor entry that bypasses routing rules. You can access it by using the following link https://<your Okta tenant>/login/default Tip In this case we enabled idemeum authentication for all users in Okta. If you want to configure a small group of users to try out idemeum, you can always create a special group, put your test users in that group, and assign routing rule only to this group. To do that you can use User matches configuration in the routing rule set up. It is also recommended that you customize Sign-Out page when routing rule is enabled with idemeum. To do that, navigate to Settings -> Customization , and click Edit in the Sign-Out Page section. Choose Use a custom sign-out page and enter any page, for example https://okta.com . Click Save . 4. \ud83e\uddea Test user sign-in \u00b6 Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your Okta tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Okta application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Okta deployment with passwordless multi-factor authentication. Create an Identity Provider in Okta \u21a9 Identity Providers in Okta \u21a9 Configure routing rules in Okta \u21a9","title":"Okta"},{"location":"okta/#integrate-idemeum-with-okta","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Integrate idemeum with Okta"},{"location":"okta/#how-can-idemeum-help-secure-okta-deployments","text":"idemeum integrates with Okta directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. Verified log in idemeum has built in document verification. When integrated with Okta, idemeum can log in users not just using their email address, but also verified first name and last name, whereby making every login trusted and verified and reducing identity fraud.","title":"How can idemeum help secure Okta deployments?"},{"location":"okta/#how-does-the-integration-work","text":"idemeum integrates with Okta in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Okta tenant with idemeum over SAML protocol. In the diagram above, we see the deployment where Okta is deployed as a primary IDP and all applications are federated directly with Okta. When user is trying to authenticate to any corporate application, the sign in request is sent first to Okta, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Okta, which in turn forwards that user information to federated application. As a result users can access application without any passwords. idemeum differentiation The key difference to note here is that you can configure idemeum to release not just email, but also first name and last name for employee. When all these claims are processed for authentication, the match is done not just with email but with verified ID document information. Therefore, every login becomes trusted.","title":"How does the integration work?"},{"location":"okta/#integrate-idemeum-with-okta_1","text":"We are going to go through simple four steps to integrate idemeum with your Okta identity environment. Request idemeum tenant Set up verified login (optional) Configure Okta for federation Test user sign-in","title":"Integrate idemeum with Okta"},{"location":"okta/#1-request-idemeum-tenant","text":"\ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Okta and whether you want to use verified login or not. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. Okta SAML IDP metadata - we will need your Okta IDP metadata file, so that we can configure SAML trust on our end. As a result, we will share the following with you: IDP issuer URI - you will need this URI to configure Okta federation with idemeum. This URI can always be extracted from your idemeum SAML metadata file. IdP Single Sign-On URL - you will need this URI to configure Okta federation with idemeum. This is the URL where Okta will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Okta and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file.","title":"1. \ud83e\udd1d Request idemeum tenant"},{"location":"okta/#2-set-up-verified-login","text":"This step is optional. You can login your users and match the account using only email address. This is what most of the commercial identity solutions do today. However, idemeum offers an opportunity to increase identity trust and login your users with not just email, but a combination of email + firstName + lastName . To make it work, we will need to create a custom attribute for Okta users, say verifiedIdentity and populate it with a combination of email + firstName + lastName. When idemeum will return verified user claims, Okta will match them against this custom attribute. In this case we are going to be working with Active Directory users that you are synchronizing to Okta tenant. Login to your Okta tenant with admin account Navigate to Directory -> Profile editor Choose User(default) profile, click Add Attribute and create custom attribute that you will be using for user matching. In our case we are creating an attribute with the display name Verified Identity and variable name verifiedIdentity . We are not making this attribute required. Now navigate to Directory -> Profile editor and then choose your Active Directory integration and click Mappings . Scroll all the way down to find custom attribute that we created. And now create a custom mapping for this attribute. 1 toLowerCase ( appuser . firstName ) + '_' + toLowerCase ( appuser . lastName ) + '_' + toLowerCase ( appuser . email ) Info What this means is that when users will be synced from Active Directory, Okta will take a combination of firstName + lastName + email and will populate that combination into our custom attribute verifiedIdentity . At this point we have configured everything necessary to perform verified login with claims passed from idemeum. Now we can move to the next step of configuring SAML federation between Okta and idemeum. Tip At this point you will need to force sync users from Active Directory to make sure custom attributes get populated for all your existing or new users.","title":"2. \u2714\ufe0f Set up verified login"},{"location":"okta/#3-configure-okta-for-federation","text":"","title":"3. \u2699\ufe0f Configure Okta for federation"},{"location":"okta/#configure-3rd-party-idp","text":"Navigate to Security -> Identity Providers -> Add Identity Provider -> Add SAML 2.0 IDP Let's configure the following options. Name - assign a name to your IDP, for example idemeum SAML IDP username - create custom string for this attribute 1 String . toLowerCase ( idpuser . firstName ) + '_' + String . toLowerCase ( idpuser . lastName ) + '_' + idpuser . email Match against - choose the display name of the custom attribute your created in the previous section. Account Link Policy - choose Automatic Account Link Restriction - choose None If match not found - choose Redirect to Okta sign-in page IDP issuer URI - enter the URI that we shared with you. You will always have that available in your idemeum metadata file. IdP Single Sign-On URL - enter the URL that we shared with you. You will always have that available in your idemeum metadata file. IdP Signature Certificate - enter the certificate that we shared with you. You will always have that available in your idemeum metadata file. Request Binding - make sure you have HTTP POST selected. You can leave other parameters with default settings. Save your identity provider configuration. Return to Identity Providers section, expand the details of the identity provider you just created by clicking on the arrow next to IDP name, download metadata file and share with our support team . We will need this information to establish trust between your Okta tenant and idemeum. At this point you created identity provider in Okta to federate all authentication requests with idemeum. As a next step you need to apply this identity provider in Okta Routing Rules.","title":"Configure 3rd party IDP"},{"location":"okta/#configure-routing-rule","text":"Navigate to Security -> Identity Providers -> Routing Rules . In this case we are going to create a new routing rule for passwordless authentication. As you can see we are keeping default configuration, but we are using our idemeum SAML identity provider for authentication. Warning Once you enable a routing rule, all authentication requests will be redirected to idemeum. If for any reason the idemeum authentication does not work, and you need to log into Okta admin account with username and password, you can always use the backdoor entry that bypasses routing rules. You can access it by using the following link https://<your Okta tenant>/login/default Tip In this case we enabled idemeum authentication for all users in Okta. If you want to configure a small group of users to try out idemeum, you can always create a special group, put your test users in that group, and assign routing rule only to this group. To do that you can use User matches configuration in the routing rule set up. It is also recommended that you customize Sign-Out page when routing rule is enabled with idemeum. To do that, navigate to Settings -> Customization , and click Edit in the Sign-Out Page section. Choose Use a custom sign-out page and enter any page, for example https://okta.com . Click Save .","title":"Configure routing rule"},{"location":"okta/#4-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your Okta tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Okta application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Okta deployment with passwordless multi-factor authentication. Create an Identity Provider in Okta \u21a9 Identity Providers in Okta \u21a9 Configure routing rules in Okta \u21a9","title":"4. \ud83e\uddea Test user sign-in"},{"location":"sso-overview/","text":"Enterprise Single Sign-On \u00b6 idemeum can act as a SAML or OIDC 3rd party Identity Provider. Therefore, it can be federated with existing SSO enterprise identity providers such as Okta or Microsoft Azure Active Directory to provide passwordless MFA experience. Once idemeum is integrated, employees can use idemeum mobile app to access corporate resources, including SSO applications, VPN resources, and virtual desktops. Supported SSO MFA integrations \u00b6 Azure Active Directory Learn how to integrate Azure AD with idemeum passwordless MFA. VMware WS1 Access Passwordless MFA integration with VMware Workspace ONE Access. Okta Integrate Okta with idemeum passwordless MFA. Google Cloud Identity Integrate Google Cloud Identity with idemeum passwordless MFA. How enterprise integration works \u00b6 Typical integration would have all your SaaS or on-premises applications federated with your existing Identity Provider. And then having idemeum handle all authentication requests for your users. In this case idemeum becomes passwordless Multi Factor authentication for your users.","title":"Overview"},{"location":"sso-overview/#enterprise-single-sign-on","text":"idemeum can act as a SAML or OIDC 3rd party Identity Provider. Therefore, it can be federated with existing SSO enterprise identity providers such as Okta or Microsoft Azure Active Directory to provide passwordless MFA experience. Once idemeum is integrated, employees can use idemeum mobile app to access corporate resources, including SSO applications, VPN resources, and virtual desktops.","title":"Enterprise Single Sign-On"},{"location":"sso-overview/#supported-sso-mfa-integrations","text":"","title":"Supported SSO MFA integrations"},{"location":"sso-overview/#how-enterprise-integration-works","text":"Typical integration would have all your SaaS or on-premises applications federated with your existing Identity Provider. And then having idemeum handle all authentication requests for your users. In this case idemeum becomes passwordless Multi Factor authentication for your users.","title":"How enterprise integration works"},{"location":"ws1access/","text":"Integrate idemeum with VMware WS1 Access \u00b6 .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Workspace ONE deployments? \u00b6 idemeum integrates with Workspace ONE Access directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. How does the integration work? \u00b6 idemeum integrates with Workspace ONE in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Workspace ONE appliance or SaaS tenant with idemeum over SAML protocol. Workspace ONE Access can be your primary Identity Provider or a broker. idemeum can integrate either directly with your primary identity provider, or it can integrate with Access when it is deployed as a broker. In the diagram above, we can see the deployment where WS1 Access is deployed as a primary IDP and all applications are federated directly with WS1 Access. When user is trying to authenticate to any corporate application, the sign in request is sent first to WS1 Access, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Access, which in turn forwards that user information to federated application. As a result users can access application without any passwords. Integrate idemeum with Workspace ONE Access \u00b6 We are going to go through simple three steps to integrate idemeum with your WS1 Access identity environment. Request idemeum tenant Configure WS1 Access for federation Test user sign-in 1. Request idemeum tenant \u00b6 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Workspace ONE Access. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. WS1 Access tenant name - we will need your WS1 Access tenant name so that we can have access to your IDP metadata file, so that we can configure SAML trust on our end. As a result of tenant provisioning we will share the SAML XML metadata file URL with you that you will need to use to set up federation with WS1 Access. Tip Metadata XML file link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . 2. Configure Workspace ONE Access for federation \u00b6 Set idemeum as 3rd party IDP \u00b6 Login in to your Workspace ONE Access Tenant as an admin. Navigate to Identity & Access Management -> Identity Providers . Click Add Identity Provider -> Create SAML IDP . Add the name of your identity provider. For instance idemeum . Paste the metadata URL that you got from us when we provisioned idemeum tenant for you. Tip Metadata XML fill link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . Once the SAML metadata is processed, make sure you adjust Binding Protocol to HTTP POST . Make sure Name ID Policy in SAML Request is defined as Unspecified . Choose ALL RANGES in Network section. Create one authentication method for your IDP. In the Authentication Methods section, create name for your method and choose PasswordProtectedTransport for SAML context input field. Click Add to save IDP configuration. Apply idemeum IDP in policy configuration \u00b6 At this point you have configured idemeum as 3rd party identity provider for WS1 Access. What that means is that WS1 Access can now be redirecting authentication requests to idemeum using SAML protocol. What we have to do now is to apply this configuration in WS1 Access policies so that idemeum is actually used for authentication. Navigate to Identity & Access Management -> Policies . You might have different policies depending on your configuration. In this case we will be leveraging default policy set to apply idemeum configuration. We click default_access_policy_set , then click Edit . Navigate to Configuration section, and edit the rule that has Web Browser device type. This rule will be catching all authentication requests including desktop and mobile. For this rule choose Authenticate using , then select the authentication method that you created when you defined idemeum Identity Provider in the previous section. In our case that is idemeum auth . Tip You can always create a fallback rule, in case your employees are still using passwords. In that case when idemeum authentication fails for any reason, WS1 Access will fall back to using passwords to authenticate your employees. Moreover, you can create more specific authentication policy rules for iOS and Android and place them above Web Browser rule that you created. You would do that if you want to authenticate requests coming from mobile devices in a different way. But note, that idemeum supports authentication from both Mobile and Desktop, therefore going with default configuration will get you covered. 3. Test user sign in \u00b6 Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your WS1 Access tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to WS1 Access application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Workspace ONE deployment with passwordless multi-factor authentication. WS1 Access VMWare page \u21a9 Configure 3rd party IDP for WS1 Access \u21a9","title":"Worspace ONE Access"},{"location":"ws1access/#integrate-idemeum-with-vmware-ws1-access","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Integrate idemeum with VMware WS1 Access"},{"location":"ws1access/#how-can-idemeum-help-secure-workspace-one-deployments","text":"idemeum integrates with Workspace ONE Access directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple.","title":"How can idemeum help secure Workspace ONE deployments?"},{"location":"ws1access/#how-does-the-integration-work","text":"idemeum integrates with Workspace ONE in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Workspace ONE appliance or SaaS tenant with idemeum over SAML protocol. Workspace ONE Access can be your primary Identity Provider or a broker. idemeum can integrate either directly with your primary identity provider, or it can integrate with Access when it is deployed as a broker. In the diagram above, we can see the deployment where WS1 Access is deployed as a primary IDP and all applications are federated directly with WS1 Access. When user is trying to authenticate to any corporate application, the sign in request is sent first to WS1 Access, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Access, which in turn forwards that user information to federated application. As a result users can access application without any passwords.","title":"How does the integration work?"},{"location":"ws1access/#integrate-idemeum-with-workspace-one-access","text":"We are going to go through simple three steps to integrate idemeum with your WS1 Access identity environment. Request idemeum tenant Configure WS1 Access for federation Test user sign-in","title":"Integrate idemeum with Workspace ONE Access"},{"location":"ws1access/#1-request-idemeum-tenant","text":"As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Workspace ONE Access. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. WS1 Access tenant name - we will need your WS1 Access tenant name so that we can have access to your IDP metadata file, so that we can configure SAML trust on our end. As a result of tenant provisioning we will share the SAML XML metadata file URL with you that you will need to use to set up federation with WS1 Access. Tip Metadata XML file link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml .","title":"1. Request idemeum tenant"},{"location":"ws1access/#2-configure-workspace-one-access-for-federation","text":"","title":"2. Configure Workspace ONE Access for federation"},{"location":"ws1access/#set-idemeum-as-3rd-party-idp","text":"Login in to your Workspace ONE Access Tenant as an admin. Navigate to Identity & Access Management -> Identity Providers . Click Add Identity Provider -> Create SAML IDP . Add the name of your identity provider. For instance idemeum . Paste the metadata URL that you got from us when we provisioned idemeum tenant for you. Tip Metadata XML fill link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . Once the SAML metadata is processed, make sure you adjust Binding Protocol to HTTP POST . Make sure Name ID Policy in SAML Request is defined as Unspecified . Choose ALL RANGES in Network section. Create one authentication method for your IDP. In the Authentication Methods section, create name for your method and choose PasswordProtectedTransport for SAML context input field. Click Add to save IDP configuration.","title":"Set idemeum as 3rd party IDP"},{"location":"ws1access/#apply-idemeum-idp-in-policy-configuration","text":"At this point you have configured idemeum as 3rd party identity provider for WS1 Access. What that means is that WS1 Access can now be redirecting authentication requests to idemeum using SAML protocol. What we have to do now is to apply this configuration in WS1 Access policies so that idemeum is actually used for authentication. Navigate to Identity & Access Management -> Policies . You might have different policies depending on your configuration. In this case we will be leveraging default policy set to apply idemeum configuration. We click default_access_policy_set , then click Edit . Navigate to Configuration section, and edit the rule that has Web Browser device type. This rule will be catching all authentication requests including desktop and mobile. For this rule choose Authenticate using , then select the authentication method that you created when you defined idemeum Identity Provider in the previous section. In our case that is idemeum auth . Tip You can always create a fallback rule, in case your employees are still using passwords. In that case when idemeum authentication fails for any reason, WS1 Access will fall back to using passwords to authenticate your employees. Moreover, you can create more specific authentication policy rules for iOS and Android and place them above Web Browser rule that you created. You would do that if you want to authenticate requests coming from mobile devices in a different way. But note, that idemeum supports authentication from both Mobile and Desktop, therefore going with default configuration will get you covered.","title":"Apply idemeum IDP in policy configuration"},{"location":"ws1access/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your WS1 Access tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to WS1 Access application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Workspace ONE deployment with passwordless multi-factor authentication. WS1 Access VMWare page \u21a9 Configure 3rd party IDP for WS1 Access \u21a9","title":"3. Test user sign in"},{"location":"knowledgebase/browser-support/","text":"Browsers we support with idemeum login \u00b6 In this doc we will take a look at what browsers idemeum supports with one-click , biometric , mobile app login flows. Browser support matrix \u00b6 Browser Windows Mac OS Android iOS Chrome One-click Biometric Mobile app One-click Biometric Mobile app One-click Biometric Mobile app One-click Mobile app FireFox One-click Biometric Mobile app One-click Mobile app One-click Mobile app One-click Mobile app Safari - One-click Biometric 1 Mobile app - One-click Biometric 1 Mobile app Edge One-click Biometric Mobile app One-click Biometric Mobile app One-click Mobile app - WebAuthn requires browser native support WebAuthn is browser dependent, and while most of the mainstream browsers support WebAuthn today, there is still some adoption lag. We always check the latest with official FIDO Alliance documentation so that we can test idemeum with the latest browser versions. Below you can find our update to date browser support matrix. FIDO Alliance official support matrix for WebAuthn Due to privacy controls Safari requires user gesture to trigger WebAuthn authentication. Therefore, additional button click is introduced in the flow in order to enable the biometrics flow. \u21a9 \u21a9","title":"Browser support"},{"location":"knowledgebase/browser-support/#browsers-we-support-with-idemeum-login","text":"In this doc we will take a look at what browsers idemeum supports with one-click , biometric , mobile app login flows.","title":"Browsers we support with idemeum login"},{"location":"knowledgebase/browser-support/#browser-support-matrix","text":"Browser Windows Mac OS Android iOS Chrome One-click Biometric Mobile app One-click Biometric Mobile app One-click Biometric Mobile app One-click Mobile app FireFox One-click Biometric Mobile app One-click Mobile app One-click Mobile app One-click Mobile app Safari - One-click Biometric 1 Mobile app - One-click Biometric 1 Mobile app Edge One-click Biometric Mobile app One-click Biometric Mobile app One-click Mobile app - WebAuthn requires browser native support WebAuthn is browser dependent, and while most of the mainstream browsers support WebAuthn today, there is still some adoption lag. We always check the latest with official FIDO Alliance documentation so that we can test idemeum with the latest browser versions. Below you can find our update to date browser support matrix. FIDO Alliance official support matrix for WebAuthn Due to privacy controls Safari requires user gesture to trigger WebAuthn authentication. Therefore, additional button click is introduced in the flow in order to enable the biometrics flow. \u21a9 \u21a9","title":"Browser support matrix"},{"location":"overview/architecture/","text":"Microservices architecture \u00b6 At idemeum we have chosen to build our passwordless identity platform leveraging Microservice-based Architecture (MSA) . Our goal is to achieve high velocity in software development while ensuring scalability, availability, and resilience of our cloud infrastructure. Our blog talks in details about our journey with microservices. Learn more Why microservices? \u00b6 We want to be very agile in responding to customer requests and avoid re-deployment of the whole code base for every small change or fix. What is more, we do not want to put reliability of code at risk where any potential bug can bring the whole system down. And of course we want to scale our software development team fast where any developer joining the team can quickly understand the codebase and should not depend on any tribal or historical knowledge. Here are the benefits that we are able to achieve with our current infrastructure design. Smaller teams - engineering teams can be smaller and more targeted, each focused on autonomously managing, updating, and scaling a microservice. When onboarding new engineers there is no need to spend weeks figuring out how monolith works whereby increasing team velocity and removing learning curve barrier. Development flexibility - each team has a flexibility to choose technology stacks that best suit the need of the service and business capability they are developing. Exploration of new technologies and refactoring can be done incrementally as opposed to requiring \"big-bang\" changes. Deployment flexibility - teams can practice independent continuous integration and deployment of the business capabilities. With MSA a microservice can be updated without having to redeploy the whole application, making it easier to deliver small updates and changes. Flexible resource allocation - with MSA different services can have different availability requirements and have resources assigned based on criticality and business needs. Resilience - with MSA there is not centralized point of failure, and when a certain microservice goes down, the whole application does not stop functioning. Errors are isolated and are easier to remedy. We also believe that MSA is the architecture that provides a path to four 9s SLA with high internal SLO and SLI. How we designed our architecture \u00b6 Here are the principles that we relied upon when designing idemeum architecture. Single Responsibility Principle (SRP) - microservices need to be cohesive and implement a small set of strongly related functions. Common Closure Principle - microservices must conform to a principle where things that change together should be packaged together in order to ensure that each change affects only one service. Independent data store - microservice doesn\u2019t share database tables with other microservices. Thoughtfully stateful or stateless - whether it requires access to a persistence store or is it going to be a stateless service providing compute only processing. Data availability needs - data availability needs are accounted for - data distribution, data replication and understanding the impact to other microservices that rely on this new microservice. Deployment topology \u00b6 idemeum deployment topology has no single point of failure and provides high availability and fault tolerance using the following AWS services: Virtual Private Cloud (VPC) Public and Private subnets Multiple Availability Zones Cross-AZ Load Balancer Internet Gateway NAT Gateway CloudFront / CDN","title":"Microservices architecture"},{"location":"overview/architecture/#microservices-architecture","text":"At idemeum we have chosen to build our passwordless identity platform leveraging Microservice-based Architecture (MSA) . Our goal is to achieve high velocity in software development while ensuring scalability, availability, and resilience of our cloud infrastructure. Our blog talks in details about our journey with microservices. Learn more","title":"Microservices architecture"},{"location":"overview/architecture/#why-microservices","text":"We want to be very agile in responding to customer requests and avoid re-deployment of the whole code base for every small change or fix. What is more, we do not want to put reliability of code at risk where any potential bug can bring the whole system down. And of course we want to scale our software development team fast where any developer joining the team can quickly understand the codebase and should not depend on any tribal or historical knowledge. Here are the benefits that we are able to achieve with our current infrastructure design. Smaller teams - engineering teams can be smaller and more targeted, each focused on autonomously managing, updating, and scaling a microservice. When onboarding new engineers there is no need to spend weeks figuring out how monolith works whereby increasing team velocity and removing learning curve barrier. Development flexibility - each team has a flexibility to choose technology stacks that best suit the need of the service and business capability they are developing. Exploration of new technologies and refactoring can be done incrementally as opposed to requiring \"big-bang\" changes. Deployment flexibility - teams can practice independent continuous integration and deployment of the business capabilities. With MSA a microservice can be updated without having to redeploy the whole application, making it easier to deliver small updates and changes. Flexible resource allocation - with MSA different services can have different availability requirements and have resources assigned based on criticality and business needs. Resilience - with MSA there is not centralized point of failure, and when a certain microservice goes down, the whole application does not stop functioning. Errors are isolated and are easier to remedy. We also believe that MSA is the architecture that provides a path to four 9s SLA with high internal SLO and SLI.","title":"Why microservices?"},{"location":"overview/architecture/#how-we-designed-our-architecture","text":"Here are the principles that we relied upon when designing idemeum architecture. Single Responsibility Principle (SRP) - microservices need to be cohesive and implement a small set of strongly related functions. Common Closure Principle - microservices must conform to a principle where things that change together should be packaged together in order to ensure that each change affects only one service. Independent data store - microservice doesn\u2019t share database tables with other microservices. Thoughtfully stateful or stateless - whether it requires access to a persistence store or is it going to be a stateless service providing compute only processing. Data availability needs - data availability needs are accounted for - data distribution, data replication and understanding the impact to other microservices that rely on this new microservice.","title":"How we designed our architecture"},{"location":"overview/architecture/#deployment-topology","text":"idemeum deployment topology has no single point of failure and provides high availability and fault tolerance using the following AWS services: Virtual Private Cloud (VPC) Public and Private subnets Multiple Availability Zones Cross-AZ Load Balancer Internet Gateway NAT Gateway CloudFront / CDN","title":"Deployment topology"},{"location":"overview/biometric/","text":"Biometric Login \u00b6 Biometric login adds additional level of security by requiring users to authenticate with biometrics leveraging platform authenticators (i.e. Touch ID, Face ID ) or external authenticators (i.e. Yubikey ). Try Biometric Login User experience with Biometric Login \u00b6 Biometric login experience consists of two parts: registration and authentication . 1. Registration \u00b6 When a user is logging into an application with idemeum passwordless login for the first time, she will need to go through the registration process. Registration will involve verifying email address with OTP and then registering FIDO2/WebAuthn credentials. Why pair WebAuthn with email verification? WebAuthn is a protocol for authenticating users with biometrics. But before WebAuthn can be used, user identity needs to be verified. Typically, WebAuthn is paired with other Auth methods. idemeum leverages email OTP to create user identity first, and then use WebAuthn to register biometrics for existing identity. Technically. WebAuthn is an extension to one-click login flow. Registration consists of two parts: User validates ownership of an email address. idemeum will send a one-time code to the email address provided in the login form. That code needs to be typed back in order to prove email ownership. User will be prompted to register biometric (create public/private key pair using FIDO2/CTAP compliant authenticator). Once registration is complete, idemeum user account is created, unique Decentralized Identifier (DID) is assigned to the user, JWT token is saved as a cookie in the user's browser, and FIDO public/private key pair is generated. Note Registration flow will be repeated in the following cases: User never used idemeum passwordless login before User is using a new browser / or the cookies have been cleared from the browser idemeum session is expired and user needs to prove email ownership again 2. Authentication \u00b6 When a user already logged in into any app with idemeum passwordless login, she will have a cryptographically signed and encrypted JWT present as cookie in the browser and biometric registered. As a result the user will be able to seamlessly authenticate to any app with a biometric scan. JWT is used to enable Single Sign-On across applications. Authentication with WebAuthn is a breeze, especially coupled with Single Sign-On that idemeum provides. Once registered, when users land in any application that supports idemeum passwordless login, they will be able to authenticate with a simple biometric scan. That is all. Simple and frictionless. Biometric Login technical overview \u00b6 Biometric login takes one-click login to the next level by adding biometric based authentication using WebAuthn . The Web Authentication API (also known as WebAuthn) is a specification written by the W3C and FIDO , with the participation of Google, Mozilla, Microsoft, Yubico, and others. The API allows servers to register and authenticate users using public key cryptography instead of a password. Users register by verifying ownership of an email address with a One Time Code . Then, based on whether developer enabled biometric registration option, users will be able to register biometric with WebAuthn. Upon registration a public / private key pair is generated, where public key is uploaded to FIDO2 server at the idemeum backend, and private key is securely stored locally in the FIDO2/CTAP compliant authenticator protected by biometric. All subsequent login requests will be performed with the user providing biometric scan. All user interactions are happening right from the browser, whereby providing seamless experience across mobile and desktop platforms. The only requirement is that browser supports WebAuthn, and in case it does not, developers have an option to configure a fallback to one-click login. You can get more technical details about WebAuthn from our blog post. Passwordless guide Platform and browser support \u00b6 idemeum supports biometric login across desktop browser flows and native mobile apps (iOS and Android). Check our browser support matrix to see what browsers we support today. Browser support matrix","title":"Biometric login"},{"location":"overview/biometric/#biometric-login","text":"Biometric login adds additional level of security by requiring users to authenticate with biometrics leveraging platform authenticators (i.e. Touch ID, Face ID ) or external authenticators (i.e. Yubikey ). Try Biometric Login","title":"Biometric Login"},{"location":"overview/biometric/#user-experience-with-biometric-login","text":"Biometric login experience consists of two parts: registration and authentication .","title":"User experience with Biometric Login"},{"location":"overview/biometric/#1-registration","text":"When a user is logging into an application with idemeum passwordless login for the first time, she will need to go through the registration process. Registration will involve verifying email address with OTP and then registering FIDO2/WebAuthn credentials. Why pair WebAuthn with email verification? WebAuthn is a protocol for authenticating users with biometrics. But before WebAuthn can be used, user identity needs to be verified. Typically, WebAuthn is paired with other Auth methods. idemeum leverages email OTP to create user identity first, and then use WebAuthn to register biometrics for existing identity. Technically. WebAuthn is an extension to one-click login flow. Registration consists of two parts: User validates ownership of an email address. idemeum will send a one-time code to the email address provided in the login form. That code needs to be typed back in order to prove email ownership. User will be prompted to register biometric (create public/private key pair using FIDO2/CTAP compliant authenticator). Once registration is complete, idemeum user account is created, unique Decentralized Identifier (DID) is assigned to the user, JWT token is saved as a cookie in the user's browser, and FIDO public/private key pair is generated. Note Registration flow will be repeated in the following cases: User never used idemeum passwordless login before User is using a new browser / or the cookies have been cleared from the browser idemeum session is expired and user needs to prove email ownership again","title":"1. Registration"},{"location":"overview/biometric/#2-authentication","text":"When a user already logged in into any app with idemeum passwordless login, she will have a cryptographically signed and encrypted JWT present as cookie in the browser and biometric registered. As a result the user will be able to seamlessly authenticate to any app with a biometric scan. JWT is used to enable Single Sign-On across applications. Authentication with WebAuthn is a breeze, especially coupled with Single Sign-On that idemeum provides. Once registered, when users land in any application that supports idemeum passwordless login, they will be able to authenticate with a simple biometric scan. That is all. Simple and frictionless.","title":"2. Authentication"},{"location":"overview/biometric/#biometric-login-technical-overview","text":"Biometric login takes one-click login to the next level by adding biometric based authentication using WebAuthn . The Web Authentication API (also known as WebAuthn) is a specification written by the W3C and FIDO , with the participation of Google, Mozilla, Microsoft, Yubico, and others. The API allows servers to register and authenticate users using public key cryptography instead of a password. Users register by verifying ownership of an email address with a One Time Code . Then, based on whether developer enabled biometric registration option, users will be able to register biometric with WebAuthn. Upon registration a public / private key pair is generated, where public key is uploaded to FIDO2 server at the idemeum backend, and private key is securely stored locally in the FIDO2/CTAP compliant authenticator protected by biometric. All subsequent login requests will be performed with the user providing biometric scan. All user interactions are happening right from the browser, whereby providing seamless experience across mobile and desktop platforms. The only requirement is that browser supports WebAuthn, and in case it does not, developers have an option to configure a fallback to one-click login. You can get more technical details about WebAuthn from our blog post. Passwordless guide","title":"Biometric Login technical overview"},{"location":"overview/biometric/#platform-and-browser-support","text":"idemeum supports biometric login across desktop browser flows and native mobile apps (iOS and Android). Check our browser support matrix to see what browsers we support today. Browser support matrix","title":"Platform and browser support"},{"location":"overview/definition/","text":"What is idemeum? \u00b6 Meet passwordless and private identity platform \u00b6 idemeum is a digital identity platform that provides a set of tools and SDKs to implement passwordless auth flows for mobile and web applications. idemeum platform and its architecture rests on three fundamental principles: Passwordless auth - idemeum is focused on reducing user friction and providing authentication flows that do not rely on passwords. Today we support one-click login , login with biometrics , and login with idemeum app . Private identity - we put security and privacy at the heart of our DNA. We developed Privacy-aware Identity Infrastructure that is unlike traditional identity stores. We leverage tools such as client-side encryption, hardware based key management, and key delegation to offer users identity privacy and control. Single Sign-On - idemeum offers unmatched user experience by enabling Single-Sign On across domains and applications, so that users log in once and can access any application with a click of a button. Platform characteristics \u00b6 Let's dig deeper into what defines idemeum digital identity platform. Component Description Platform Application developers outsource login flows end to end to us. We do not provide you with numerous tools, SDKs, and APIs to built embedded auth. We value your time and abstract all this complexity: implementing auth flows, security, scalability, privacy. We give you one SDK to connect to idemeum and implement auth for your apps. Identity Provider idemeum is an Identity Provider (IDP). We provide Single Sign-On to user across applications and domains. Once users login with idemeum to an application, the session gets created, so that users can seamlessly login to any other application that supports idemeum. Passwordless No traditional login experience for idemeum. We are passwordless end to end . Our goal is to remove friction for your users and help you build trusted relationship with your customers. Private by design We are the only SSO Identity Provider that offers users privacy with their digital identity. No, we do not use blockchain \ud83d\ude00. With our mobile app we offer a decentralized model where digital identity data is only stored on users' devices. With our cloud we also designed a privacy preserving infrastructure so that only end users have access to their data. Auth flows overview \u00b6 idemeum offers three types of passwordless flows today. Component Description One-Click Simplest form of authenticating idemeum users into web, native, and mobile applications. One click login leverages asymmetric crypto key pair to authenticate users. Biometric Seamless authentication coupled with security of biometrics. Biometric login is based on FIDO2/Webauthn behind the scenes. idemeum app Most secure, and most importantly 100% private authentication method. Your phone becomes your personal identity hub - all identity claims and information are stored in the idemeum app only. Auth flows demo \u00b6 You can explore and experience all idemeum passwordless flows with our JavaScript demo app. Live Demo","title":"What is idemeum?"},{"location":"overview/definition/#what-is-idemeum","text":"","title":"What is idemeum?"},{"location":"overview/definition/#meet-passwordless-and-private-identity-platform","text":"idemeum is a digital identity platform that provides a set of tools and SDKs to implement passwordless auth flows for mobile and web applications. idemeum platform and its architecture rests on three fundamental principles: Passwordless auth - idemeum is focused on reducing user friction and providing authentication flows that do not rely on passwords. Today we support one-click login , login with biometrics , and login with idemeum app . Private identity - we put security and privacy at the heart of our DNA. We developed Privacy-aware Identity Infrastructure that is unlike traditional identity stores. We leverage tools such as client-side encryption, hardware based key management, and key delegation to offer users identity privacy and control. Single Sign-On - idemeum offers unmatched user experience by enabling Single-Sign On across domains and applications, so that users log in once and can access any application with a click of a button.","title":"Meet passwordless and private identity platform"},{"location":"overview/definition/#platform-characteristics","text":"Let's dig deeper into what defines idemeum digital identity platform. Component Description Platform Application developers outsource login flows end to end to us. We do not provide you with numerous tools, SDKs, and APIs to built embedded auth. We value your time and abstract all this complexity: implementing auth flows, security, scalability, privacy. We give you one SDK to connect to idemeum and implement auth for your apps. Identity Provider idemeum is an Identity Provider (IDP). We provide Single Sign-On to user across applications and domains. Once users login with idemeum to an application, the session gets created, so that users can seamlessly login to any other application that supports idemeum. Passwordless No traditional login experience for idemeum. We are passwordless end to end . Our goal is to remove friction for your users and help you build trusted relationship with your customers. Private by design We are the only SSO Identity Provider that offers users privacy with their digital identity. No, we do not use blockchain \ud83d\ude00. With our mobile app we offer a decentralized model where digital identity data is only stored on users' devices. With our cloud we also designed a privacy preserving infrastructure so that only end users have access to their data.","title":"Platform characteristics"},{"location":"overview/definition/#auth-flows-overview","text":"idemeum offers three types of passwordless flows today. Component Description One-Click Simplest form of authenticating idemeum users into web, native, and mobile applications. One click login leverages asymmetric crypto key pair to authenticate users. Biometric Seamless authentication coupled with security of biometrics. Biometric login is based on FIDO2/Webauthn behind the scenes. idemeum app Most secure, and most importantly 100% private authentication method. Your phone becomes your personal identity hub - all identity claims and information are stored in the idemeum app only.","title":"Auth flows overview"},{"location":"overview/definition/#auth-flows-demo","text":"You can explore and experience all idemeum passwordless flows with our JavaScript demo app. Live Demo","title":"Auth flows demo"},{"location":"overview/flowcomparison/","text":"Login flows comparison table \u00b6 In previous sections we reviewed one-click , biometric , and idemeum app login flows in detail. Let's take a look at the comparison table that will help you choose what login flow is best suited for your user experience and technical requirements. Category definition \u00b6 User installs software - whether your users will need to install additional software. Where is identity? - location where identity claims are stored. Digital identity can either reside in Privacy Aware Dedicated Cloud managed by idemeum, or it can reside on a mobile device. In both cases we enable user privacy with digital identity. Learn more . Biometric support - whether login flow supports biometrics authentication or not. What claims are verified - what claims can be verified for user registration. Passwordless - are passwords used or not? \ud83e\udd23 Portable - how portable the authentication is. idemeum is an Identity Provider and enables Single Sign-On (SSO) across apps. Mobile app takes it to the next level and can offer portability across corporate and personal apps as well. Privacy - how user privacy is enabled. Learn more . Verification frequency - how often users will need to go through registration flow, meaning to verify their email address again. Typically happens with new device, new browser, or when idemeum session expires. Auth experience - how the users are actually authenticated. User representation - how user digital identity is represented. Contact us if you have additional questions. Contact us","title":"Login flows comparison"},{"location":"overview/flowcomparison/#login-flows-comparison-table","text":"In previous sections we reviewed one-click , biometric , and idemeum app login flows in detail. Let's take a look at the comparison table that will help you choose what login flow is best suited for your user experience and technical requirements.","title":"Login flows comparison table"},{"location":"overview/flowcomparison/#category-definition","text":"User installs software - whether your users will need to install additional software. Where is identity? - location where identity claims are stored. Digital identity can either reside in Privacy Aware Dedicated Cloud managed by idemeum, or it can reside on a mobile device. In both cases we enable user privacy with digital identity. Learn more . Biometric support - whether login flow supports biometrics authentication or not. What claims are verified - what claims can be verified for user registration. Passwordless - are passwords used or not? \ud83e\udd23 Portable - how portable the authentication is. idemeum is an Identity Provider and enables Single Sign-On (SSO) across apps. Mobile app takes it to the next level and can offer portability across corporate and personal apps as well. Privacy - how user privacy is enabled. Learn more . Verification frequency - how often users will need to go through registration flow, meaning to verify their email address again. Typically happens with new device, new browser, or when idemeum session expires. Auth experience - how the users are actually authenticated. User representation - how user digital identity is represented. Contact us if you have additional questions. Contact us","title":"Category definition"},{"location":"overview/loginapp/","text":"Login with idemeum mobile app \u00b6 Login with idemeum app is the most secure, multi-factor, decentralized, and completely private authentication method for your users. Try idemeum app login Users install idemeum app, set it up in two minutes, and they can start logging in into resources that support idemeum passwordless authentication using idemeum app. Mobile app uses WebAuthn and DID asymmetric cryptography to authenticate users' identities with idemeum backend. When a user logs in to an online resource, idemeum backend sends a challenge with the request to authenticate on a mobile device. Once the request is approved with biometrics, mobile app creates WebAuthn and DID assertions signed by the previously generated private keys and sends them back to idemeum backend. .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How idemeum app works \u00b6 Registration \u00b6 As a first step users download and install idemeum app. You can scan the QR-code with your camera app to download idemeum. Setting up idemeum is very simple - it will literally take you 5 minutes. As idemeum is decentralized, the onboarding is user-driven. There is nothing you will need except downloading and setting up an application. idemeum app is 100% private Please, note that idemeum app is 100% private. ALL information you upload or input into the app will stay in the app. We will NOT store any of your personal information in our backend. Let's go through the steps to set it up: Launch idemeum app on your mobile device. The app will ask you to enable biometrics. This is the key step to generate crypto keys on your mobile device and register your biometric and DID public keys with idemeum backend. As a next step you will need to add your identity information - your email address, your phone number, and your ID document (i.e. driver's license). idemeum app will verify these pieces of information and will store them on a mobile device. NO information will exist in our backend. The email and phone number will be verified using one-time-code and SMS. You just need to grab the codes and input them into the app. To verify drivers license you will need to scan your drivers license in the idemeum app and then do a selfie for liveness detection and to make sure you own that document. The app will guide you through the steps. This step is optional and you can skip it. You are now all set with idemeum app. Authentication \u00b6 Once the user has an app installed, authentication becomes very simple - navigate to application, scan the QR-code to login, authenticate with biometrics, and you are in. Here is how high level authentication with idemeum app looks like. idemeum uses asymmetric cryptography to authenticate your identity with idemeum backend. When you log in to an online resource, idemeum backend sends your app a challenge with the request to sign it with your private key. By scanning your biometric with idemeum app you automatically unlock your private key, sign the requested challenge, and send it back to our backend. QR code vs. Push Notification The very first time user is logging in using idemeum app, she will need to scan the QR-code and then authenticate. All subsequent logins will be in the form of push notifications to users' devices. Once the user authenticates with the biometric on a mobile device, the requested identity claims (such as email address or phone number) will be released directly from the app , not our backend. idemeum mobile app is decentralized and identity claims are only stored on a mobile device. It is important to note that idemeum app is passwordless and multi-factor . That is why it is called passwordless MFA. You authenticate with two factors: something you have (your mobile device with certificate on it) and something you are (your biometrics). How is app 100% private? \u00b6 When you create your digital identity with idemeum app, you are assigned a Decentralized Identifier (DID) that uniquely represents your digital identity among others. You DID is a globally unique persistent identifier that does not require a centralized registration authority because it is generated and registered cryptographically. idemeum also generates a set of asymmetric cryptographic key pairs that will be unique for each user's digital identity. idemeum also generates an asymmetric cryptographic key pair that will be unique for your digital identity. Also known as public-key cryptography this style of cryptography uses a public key to encrypt data that can only be decrypted with a paired private key. Public key, which can be known to public, is stored in idemeum backend and is associated with your DID. Private key, which must be kept secret, is safely stored on your mobile device and is protected by hardware based security. On iOS devices we leverage Secure Enclave, and on Android devices we use TEE / Strong Box. Platform support \u00b6 idemeum mobile app is available on iOS and Android. For the authentication flows, we support: Desktop authentication -> login on desktop, use mobile phone to scan the QR code Mobile authentication -> login on mobile device, leverage universal / app links to authenticate with idemeum app installed on the same device.","title":"idemeum app login"},{"location":"overview/loginapp/#login-with-idemeum-mobile-app","text":"Login with idemeum app is the most secure, multi-factor, decentralized, and completely private authentication method for your users. Try idemeum app login Users install idemeum app, set it up in two minutes, and they can start logging in into resources that support idemeum passwordless authentication using idemeum app. Mobile app uses WebAuthn and DID asymmetric cryptography to authenticate users' identities with idemeum backend. When a user logs in to an online resource, idemeum backend sends a challenge with the request to authenticate on a mobile device. Once the request is approved with biometrics, mobile app creates WebAuthn and DID assertions signed by the previously generated private keys and sends them back to idemeum backend. .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Login with idemeum mobile app"},{"location":"overview/loginapp/#how-idemeum-app-works","text":"","title":"How idemeum app works"},{"location":"overview/loginapp/#registration","text":"As a first step users download and install idemeum app. You can scan the QR-code with your camera app to download idemeum. Setting up idemeum is very simple - it will literally take you 5 minutes. As idemeum is decentralized, the onboarding is user-driven. There is nothing you will need except downloading and setting up an application. idemeum app is 100% private Please, note that idemeum app is 100% private. ALL information you upload or input into the app will stay in the app. We will NOT store any of your personal information in our backend. Let's go through the steps to set it up: Launch idemeum app on your mobile device. The app will ask you to enable biometrics. This is the key step to generate crypto keys on your mobile device and register your biometric and DID public keys with idemeum backend. As a next step you will need to add your identity information - your email address, your phone number, and your ID document (i.e. driver's license). idemeum app will verify these pieces of information and will store them on a mobile device. NO information will exist in our backend. The email and phone number will be verified using one-time-code and SMS. You just need to grab the codes and input them into the app. To verify drivers license you will need to scan your drivers license in the idemeum app and then do a selfie for liveness detection and to make sure you own that document. The app will guide you through the steps. This step is optional and you can skip it. You are now all set with idemeum app.","title":"Registration"},{"location":"overview/loginapp/#authentication","text":"Once the user has an app installed, authentication becomes very simple - navigate to application, scan the QR-code to login, authenticate with biometrics, and you are in. Here is how high level authentication with idemeum app looks like. idemeum uses asymmetric cryptography to authenticate your identity with idemeum backend. When you log in to an online resource, idemeum backend sends your app a challenge with the request to sign it with your private key. By scanning your biometric with idemeum app you automatically unlock your private key, sign the requested challenge, and send it back to our backend. QR code vs. Push Notification The very first time user is logging in using idemeum app, she will need to scan the QR-code and then authenticate. All subsequent logins will be in the form of push notifications to users' devices. Once the user authenticates with the biometric on a mobile device, the requested identity claims (such as email address or phone number) will be released directly from the app , not our backend. idemeum mobile app is decentralized and identity claims are only stored on a mobile device. It is important to note that idemeum app is passwordless and multi-factor . That is why it is called passwordless MFA. You authenticate with two factors: something you have (your mobile device with certificate on it) and something you are (your biometrics).","title":"Authentication"},{"location":"overview/loginapp/#how-is-app-100-private","text":"When you create your digital identity with idemeum app, you are assigned a Decentralized Identifier (DID) that uniquely represents your digital identity among others. You DID is a globally unique persistent identifier that does not require a centralized registration authority because it is generated and registered cryptographically. idemeum also generates a set of asymmetric cryptographic key pairs that will be unique for each user's digital identity. idemeum also generates an asymmetric cryptographic key pair that will be unique for your digital identity. Also known as public-key cryptography this style of cryptography uses a public key to encrypt data that can only be decrypted with a paired private key. Public key, which can be known to public, is stored in idemeum backend and is associated with your DID. Private key, which must be kept secret, is safely stored on your mobile device and is protected by hardware based security. On iOS devices we leverage Secure Enclave, and on Android devices we use TEE / Strong Box.","title":"How is app 100% private?"},{"location":"overview/loginapp/#platform-support","text":"idemeum mobile app is available on iOS and Android. For the authentication flows, we support: Desktop authentication -> login on desktop, use mobile phone to scan the QR code Mobile authentication -> login on mobile device, leverage universal / app links to authenticate with idemeum app installed on the same device.","title":"Platform support"},{"location":"overview/oneclick/","text":"One-Click Login \u00b6 One-click login is the simplest and most intuitive authentication flow for your users. It introduces very little friction, as all users need to do is to click a button to login. Try One-Click Login User experience with One-Click Login \u00b6 One-Click login experience consists of two parts: registration and authentication . 1. Registration \u00b6 When a user logs into an application with idemeum passwordless login for the first time, she will need to go through a registration process. The process is very simple - it requires validating the ownership of an email address with one-time code. The first time user accesses an application, she is presented with a passwordless login form. Upon providing an email address, idemeum will send a one-time code to user's inbox. That code needs to be typed back in order to prove email ownership. Once registration is complete, idemeum user account is created, Decentralized Identifier (DID) is assigned to the user, and JWT token is saved as a cookie in the user's browser. At that point, user account is created with both idemeum and target application. User can manage her identity claims through identity cabinet. The claims are secured using client-side encryption (user managed encryption keys are backed by envelope encryption and AWS key management service). The master key is protected by hardware security models (HSMs) in AWS cloud. Only users have access to their encrypted identity data. When to register? Registration flow will be executed in the following cases: User never used idemeum passwordless login before. User is using a new browser / or the cookies have been cleared from the browser. In this case user will need to verify the email address, but she will not need to enter her identity claims again. idemeum session is expired and user needs to prove email ownership again. Typical idemeum session expiration is 30 days. 2. Authentication \u00b6 When a user already logged in into any app with idemeum passwordless login, she will have a JWT present as cookie in the browser, and she will be able to seamlessly authenticate to any app with one-click. Click a button, confirm the release of information, and you are in. As idemeum is a private IDP, users will be able to Single-Sign On across applications and domains. One-Click technical overview \u00b6 Behind the scenes one-click login is using cryptographically signed and encrypted JSON Web Tokens (JWT) to authenticate users. What is JWT? JSON Web Token (JWT) is an open standard ( RFC 7519 ) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. One-click binds the user\u2019s email with her browser / device using cryptography and fingerprinting. Once the user is authenticated, idemeum returns a cryptographically signed & encrypted JSON Web Token that will be saved locally in the user's browser as a cookie. Each subsequent request will include the JWT, allowing the user to access any application that supports idemeum passwordless login. JWT enables users to Single Sign-On across applications and can be used across domains. This is a stateless authentication mechanism as the user state is never saved in the idemeum backend. JWT points to a DID , which is unique for each user, and does not include any identity information. After the user validates his identity and presents his JWT to idemeum backend, she can access identity claims and privately share with the target application. More about security and privacy Platform and browser support \u00b6 idemeum supports one-click login across desktop browser flows and native mobile apps (iOS and Android). Check our browser support matrix to see what browsers we support today. Browser support matrix","title":"One-click login"},{"location":"overview/oneclick/#one-click-login","text":"One-click login is the simplest and most intuitive authentication flow for your users. It introduces very little friction, as all users need to do is to click a button to login. Try One-Click Login","title":"One-Click Login"},{"location":"overview/oneclick/#user-experience-with-one-click-login","text":"One-Click login experience consists of two parts: registration and authentication .","title":"User experience with One-Click Login"},{"location":"overview/oneclick/#1-registration","text":"When a user logs into an application with idemeum passwordless login for the first time, she will need to go through a registration process. The process is very simple - it requires validating the ownership of an email address with one-time code. The first time user accesses an application, she is presented with a passwordless login form. Upon providing an email address, idemeum will send a one-time code to user's inbox. That code needs to be typed back in order to prove email ownership. Once registration is complete, idemeum user account is created, Decentralized Identifier (DID) is assigned to the user, and JWT token is saved as a cookie in the user's browser. At that point, user account is created with both idemeum and target application. User can manage her identity claims through identity cabinet. The claims are secured using client-side encryption (user managed encryption keys are backed by envelope encryption and AWS key management service). The master key is protected by hardware security models (HSMs) in AWS cloud. Only users have access to their encrypted identity data. When to register? Registration flow will be executed in the following cases: User never used idemeum passwordless login before. User is using a new browser / or the cookies have been cleared from the browser. In this case user will need to verify the email address, but she will not need to enter her identity claims again. idemeum session is expired and user needs to prove email ownership again. Typical idemeum session expiration is 30 days.","title":"1. Registration"},{"location":"overview/oneclick/#2-authentication","text":"When a user already logged in into any app with idemeum passwordless login, she will have a JWT present as cookie in the browser, and she will be able to seamlessly authenticate to any app with one-click. Click a button, confirm the release of information, and you are in. As idemeum is a private IDP, users will be able to Single-Sign On across applications and domains.","title":"2. Authentication"},{"location":"overview/oneclick/#one-click-technical-overview","text":"Behind the scenes one-click login is using cryptographically signed and encrypted JSON Web Tokens (JWT) to authenticate users. What is JWT? JSON Web Token (JWT) is an open standard ( RFC 7519 ) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. One-click binds the user\u2019s email with her browser / device using cryptography and fingerprinting. Once the user is authenticated, idemeum returns a cryptographically signed & encrypted JSON Web Token that will be saved locally in the user's browser as a cookie. Each subsequent request will include the JWT, allowing the user to access any application that supports idemeum passwordless login. JWT enables users to Single Sign-On across applications and can be used across domains. This is a stateless authentication mechanism as the user state is never saved in the idemeum backend. JWT points to a DID , which is unique for each user, and does not include any identity information. After the user validates his identity and presents his JWT to idemeum backend, she can access identity claims and privately share with the target application. More about security and privacy","title":"One-Click technical overview"},{"location":"overview/oneclick/#platform-and-browser-support","text":"idemeum supports one-click login across desktop browser flows and native mobile apps (iOS and Android). Check our browser support matrix to see what browsers we support today. Browser support matrix","title":"Platform and browser support"},{"location":"overview/privacy/","text":"How idemeum makes identity private \u00b6 Here at idemeum we made user data privacy and security part of our DNA. That is why we designed and built Privacy-aware Identity Management Architecture . This is our secret sauce that allows you to offer your users identity privacy and data protection with modern security controls. Let's dig deeper into how exactly idemeum offers digital identity privacy and security. How idemeum enables identity privacy \u00b6 Here at idemeum we find this definition of privacy helpful: Definition Privacy is an individual's claim to control the terms under which personal information \u2014 information identifiable to the individual \u2014 is acquired , disclosed , and used . Let's see how idemeum handles data acquisition, disclosure, and usage. Data acquisition \u00b6 Our philosophy here is to give users a choice for how and where they want their data to be persisted: When users login with one-click login or biometric login , their identity information will be collected, verified and persisted privately in our cloud . Digital identity data will be encrypted, and idemeum will not have appropriate permissions to decrypt it. That means users will control and own their digital identity data. When users choose to use idemeum mobile app , their identity information will be collected, verified and persisted privately only on user's mobile devices . No personal information that users create in the app will be stored in our cloud. What is more, idemeum is architected to only work with declared data - data that was willingly shared by users. When users create idemeum profile they would typically provide first-name, last-name, email address and phone number. This is the only type of personal data that will be persisted. idemeum does not create or work with any inferred data - data developed around users without their input. Data disclosure \u00b6 Our guiding principles here are transparency and control . Users have complete transparency into their identity data through user cabinet . For idemeum mobile app, user cabinet is managed in the mobile app. For web-based login flows (one-click and biometric), the user cabinet is managed in the cloud. At any time users can navigate to their idemeum cabinet and see what profile they have with idemeum and what identity information is maintained. Any identity claim (whether that is email, phone number, or name) can be updated or removed entirely at any time. And most importantly, users have control over who and how their digital identity data is shared with. The whole purpose of persisting users' information is to provide seamless Single Sign-On across applications. Every time users go through the login process they are presented with a consent screen , so that users can choose and pick what data they want to share with the target application. Users' digital identity data is not disclosed to any third parties for any purpose without user consent. Data use \u00b6 We follow the principles of data minimization and purpose limitation . Users' digital identity data is used for only one purpose - log users into applications they choose to. And the data is only collected to the extent necessary to log users successfully into a target application. Digital identity data is not used for any other purposes, including advertising, sharing with third parties, or monetization purposes. To get more details about how we designed architecture to enable privacy and security read our blog. Learn more about privacy and security","title":"Privacy"},{"location":"overview/privacy/#how-idemeum-makes-identity-private","text":"Here at idemeum we made user data privacy and security part of our DNA. That is why we designed and built Privacy-aware Identity Management Architecture . This is our secret sauce that allows you to offer your users identity privacy and data protection with modern security controls. Let's dig deeper into how exactly idemeum offers digital identity privacy and security.","title":" How idemeum makes identity private"},{"location":"overview/privacy/#how-idemeum-enables-identity-privacy","text":"Here at idemeum we find this definition of privacy helpful: Definition Privacy is an individual's claim to control the terms under which personal information \u2014 information identifiable to the individual \u2014 is acquired , disclosed , and used . Let's see how idemeum handles data acquisition, disclosure, and usage.","title":"How idemeum enables identity privacy"},{"location":"overview/privacy/#data-acquisition","text":"Our philosophy here is to give users a choice for how and where they want their data to be persisted: When users login with one-click login or biometric login , their identity information will be collected, verified and persisted privately in our cloud . Digital identity data will be encrypted, and idemeum will not have appropriate permissions to decrypt it. That means users will control and own their digital identity data. When users choose to use idemeum mobile app , their identity information will be collected, verified and persisted privately only on user's mobile devices . No personal information that users create in the app will be stored in our cloud. What is more, idemeum is architected to only work with declared data - data that was willingly shared by users. When users create idemeum profile they would typically provide first-name, last-name, email address and phone number. This is the only type of personal data that will be persisted. idemeum does not create or work with any inferred data - data developed around users without their input.","title":"Data acquisition"},{"location":"overview/privacy/#data-disclosure","text":"Our guiding principles here are transparency and control . Users have complete transparency into their identity data through user cabinet . For idemeum mobile app, user cabinet is managed in the mobile app. For web-based login flows (one-click and biometric), the user cabinet is managed in the cloud. At any time users can navigate to their idemeum cabinet and see what profile they have with idemeum and what identity information is maintained. Any identity claim (whether that is email, phone number, or name) can be updated or removed entirely at any time. And most importantly, users have control over who and how their digital identity data is shared with. The whole purpose of persisting users' information is to provide seamless Single Sign-On across applications. Every time users go through the login process they are presented with a consent screen , so that users can choose and pick what data they want to share with the target application. Users' digital identity data is not disclosed to any third parties for any purpose without user consent.","title":"Data disclosure"},{"location":"overview/privacy/#data-use","text":"We follow the principles of data minimization and purpose limitation . Users' digital identity data is used for only one purpose - log users into applications they choose to. And the data is only collected to the extent necessary to log users successfully into a target application. Digital identity data is not used for any other purposes, including advertising, sharing with third parties, or monetization purposes. To get more details about how we designed architecture to enable privacy and security read our blog. Learn more about privacy and security","title":"Data use"},{"location":"overview/security/","text":"How idemeum secures digital identity \u00b6 idemeum offers three types of login flows: one-click , login with biometrics , and login with idemeum app . Where is identity stored? One-click and biometric login are leveraging idemeum Privacy-aware Identity Management Architecture where identity data is privately and securely stored in idemeum cloud encrypted by user generated crypto keys. Mobile app login offers completely decentralized architecture as identity data is only stored on a mobile device. In this section we are going to look a how we secure data for both of the cases. Security with One-click and Biometric login flows \u00b6 There are four major architectural components that enable one-click or biometric flow. Each component carries a certain role with a number of security protections built-in. Client-side SDK - interface for integrating idemeum login flows into a website or mobile app. SDK orchestrates idemeum end-to-end flows including login initiation, token handling, and returning the control back to the website or mobile app. Web client - angular-based single page application that verifies user claims, performs one-click or biometric (FIDO2) login, and manages user decentralized identity (DID). Identity Provider (IDP) - cloud service responsible for AWS identity federation using SAML 2.0 standards and acquiring temporary, limited-privilege credentials for the authenticated user. These credentials are used by the web client to directly interact with AWS key management service for data security. Key Management Service (KMS) \ud83d\udd11 - AWS managed service that makes it easy to create and control idemeum master key (CMK), and data encryption keys (DEK) used to encrypt user claims. AWS KMS CMKs are protected by hardware security modules (HSMs) that are validated by the FIPS 140-2 Cryptographic Module Validation Program. Let's now get deep into each of the components to get the details about security controls. 1. Client-side SDK \u00b6 When integrating with idemeum each application gets CLIENT_ID assigned so that it can interact with idemeum backend. Since CLIENT_ID is used in the front-end code, it may be exposed. Therefore, to prevent malicious applications impersonation and phishing, application owners can set the Allowed Origins (whitelisted domains) that are allowed to use the CLIENT_ID . SKD also offers application developers to validate OIDC ID token in two ways: front-end validation (in SDK code) or redirect to endpoint (provided by application developer to point to the backend endpoint). Token validation verifies standard claims like issuer, audience, expiration, issue time. It also validates the signature of the ID Token according to JWS using the algorithm specified in the JWT alg Header Parameter. The nonce value is also checked to mitigate replay attack. 2. Web client \u00b6 Secure login strongbox - login flow is implemented in a dedicated strongbox that is protected by short-term challenge and browser context (fingerprint). This prevents any part of the flow to be executed outside of the strongbox and mitigates phishing and replay attacks. The fingerprint is also associated with the DID JWT and hence protects against DID cookie stealing and replay attack. Signed and Encrypted DID JWT cookie - authenticated user session is represented as a DID JWT and saved as a cookie in the browser. This JWT is signed and encrypted to protect the integrity and confidentiality of the users' DID. Encryption SDK - encryption SDK is a client-side encryption library designed to make it easy to encrypt and decrypt users claims using industry standards and best practices. This client-side encryption in browser works directly in conjunction with the AWS key management service. idemeum cloud is not involved in the process and has no control of the data encryption keys used to encrypt the claims. SDK is built on security concepts like envelope encryption, key commitment, data key cache and symmetric cryptography. Encrypted message and algorithm suite - users' claims are packaged into a portable formatted data structure called encrypted message, which includes encrypted data along with encrypted copies of the DEK keys, the algorithm ID, and an encryption context and a message signature. Encrypted message is securely persisted in the cloud. The idemeum cloud does not have access control to decrypt the data keys. The default algorithm suite is AES-GCM with an HMAC-based extract-and-expand key derivation function (HKDF), Elliptic Curve Digital Signature Algorithm (ECDSA) signing, and a 256-bit encryption key. Authenticated encryption with additional data (AEAD) - non-secret data that is provided to encryption and decryption operations to add an additional integrity and authenticity check on the encrypted data. Typically, the decrypt operation fails if the AAD (additional authenticated data) provided to the encrypt operation does not match the AAD provided to the decrypt operation. 3. Identity Provider (IDP) \u00b6 The idemeum IDP is responsible for authenticating user and requesting temporary, limited-privilege credentials from the AWS Security Token Service (AWS STS). This is done to create and provide trusted users with temporary security credentials that can control access to key management service. Access to key management service is required to encrypt and decrypt user claims by the encryption SDK in the idemeum web client as explained in the previous section. To use idemeum IDP, the first thing we do is to create an IAM identity provider entity to establish a trust relationship between the AWS account and the idemeum IDP. The trust is established using SAML 2.0 standards. At login time, the idemeum IDP creates a SAML assertion (as part of the authentication response) that is used to get the temporary security credentials from AWS STS. These credentials are generated dynamically when requested and are limited-privilege and short-term, as the name implies. 4. Key management service \ud83d\udd11 \u00b6 The data in AWS KMS consists of idemeum customer master key (CMK) and the encryption key material they represent. This key material exists in plaintext only within AWS KMS hardware security modules (HSMs) and only when in use. AWS KMS generates key material for idemeum customer master key (CMK) in FIPS 140-2 Level 2\u2013compliant hardware security modules (HSMs). When not in use, key material is encrypted by an HSM and written to durable, persistent storage. The key material for CMK and the encryption keys that protect the key material never leave the HSMs in plaintext form. The CMK is used by the encryption SDK to encrypt and decrypt data encryption keys (DEK's) that are used to encrypt and decrypt user claims. Since all the encryption operations happen in the web client, idemeum cloud does not have the appropriate permissions to decrypt the DEK\u2019s The access to the CMK is managed using key policy. The key policy does specify a specific role that should be assumed by temporary credentials in order to access the CMK. Access to CMK is also controlled by ABAC (attribute-based access control) and policy conditions that should be met before performing encryption operations. Security with idemeum app login flows \u00b6 We created idemeum app (decentralized, verified, mobile identity) with the purpose to enable people to own and control their digital identity 100%. idemeum app is decentralized, meaning no user information ( correct, absolutely no personally identifiable information (PII) ) is persisted in the cloud when idemeum app is set up. All identity claims are securely stored on a mobile device. Decentralized Identifier (DID) \u00b6 In the idemeum app user DID is secured using public-key cryptography, where DID private key is managed in the secure hardware, such as Trusted Execution Environment (TEE) and dedicated Hardware Security Module (HSM). Biometric Support \u00b6 idemeum app uses FIDO2 standards for supporting platform and roaming authenticators for user registration and authentication. Biometric validation is enforced when user logins into any service provider and also when managing the user cabinet. Verified and Encrypted Claims \u00b6 Users manage their identity claims in the idemeum app. The claims (first name, last name, address, email, phone, and others) are identity proofed to ensure that claimed identity matches the actual identity. The claims are secured using symmetric cryptography where key material is managed in the TEE and HSM.","title":"Security"},{"location":"overview/security/#how-idemeum-secures-digital-identity","text":"idemeum offers three types of login flows: one-click , login with biometrics , and login with idemeum app . Where is identity stored? One-click and biometric login are leveraging idemeum Privacy-aware Identity Management Architecture where identity data is privately and securely stored in idemeum cloud encrypted by user generated crypto keys. Mobile app login offers completely decentralized architecture as identity data is only stored on a mobile device. In this section we are going to look a how we secure data for both of the cases.","title":"How idemeum secures digital identity"},{"location":"overview/security/#security-with-one-click-and-biometric-login-flows","text":"There are four major architectural components that enable one-click or biometric flow. Each component carries a certain role with a number of security protections built-in. Client-side SDK - interface for integrating idemeum login flows into a website or mobile app. SDK orchestrates idemeum end-to-end flows including login initiation, token handling, and returning the control back to the website or mobile app. Web client - angular-based single page application that verifies user claims, performs one-click or biometric (FIDO2) login, and manages user decentralized identity (DID). Identity Provider (IDP) - cloud service responsible for AWS identity federation using SAML 2.0 standards and acquiring temporary, limited-privilege credentials for the authenticated user. These credentials are used by the web client to directly interact with AWS key management service for data security. Key Management Service (KMS) \ud83d\udd11 - AWS managed service that makes it easy to create and control idemeum master key (CMK), and data encryption keys (DEK) used to encrypt user claims. AWS KMS CMKs are protected by hardware security modules (HSMs) that are validated by the FIPS 140-2 Cryptographic Module Validation Program. Let's now get deep into each of the components to get the details about security controls.","title":"Security with One-click and Biometric login flows"},{"location":"overview/security/#1-client-side-sdk","text":"When integrating with idemeum each application gets CLIENT_ID assigned so that it can interact with idemeum backend. Since CLIENT_ID is used in the front-end code, it may be exposed. Therefore, to prevent malicious applications impersonation and phishing, application owners can set the Allowed Origins (whitelisted domains) that are allowed to use the CLIENT_ID . SKD also offers application developers to validate OIDC ID token in two ways: front-end validation (in SDK code) or redirect to endpoint (provided by application developer to point to the backend endpoint). Token validation verifies standard claims like issuer, audience, expiration, issue time. It also validates the signature of the ID Token according to JWS using the algorithm specified in the JWT alg Header Parameter. The nonce value is also checked to mitigate replay attack.","title":"1. Client-side SDK"},{"location":"overview/security/#2-web-client","text":"Secure login strongbox - login flow is implemented in a dedicated strongbox that is protected by short-term challenge and browser context (fingerprint). This prevents any part of the flow to be executed outside of the strongbox and mitigates phishing and replay attacks. The fingerprint is also associated with the DID JWT and hence protects against DID cookie stealing and replay attack. Signed and Encrypted DID JWT cookie - authenticated user session is represented as a DID JWT and saved as a cookie in the browser. This JWT is signed and encrypted to protect the integrity and confidentiality of the users' DID. Encryption SDK - encryption SDK is a client-side encryption library designed to make it easy to encrypt and decrypt users claims using industry standards and best practices. This client-side encryption in browser works directly in conjunction with the AWS key management service. idemeum cloud is not involved in the process and has no control of the data encryption keys used to encrypt the claims. SDK is built on security concepts like envelope encryption, key commitment, data key cache and symmetric cryptography. Encrypted message and algorithm suite - users' claims are packaged into a portable formatted data structure called encrypted message, which includes encrypted data along with encrypted copies of the DEK keys, the algorithm ID, and an encryption context and a message signature. Encrypted message is securely persisted in the cloud. The idemeum cloud does not have access control to decrypt the data keys. The default algorithm suite is AES-GCM with an HMAC-based extract-and-expand key derivation function (HKDF), Elliptic Curve Digital Signature Algorithm (ECDSA) signing, and a 256-bit encryption key. Authenticated encryption with additional data (AEAD) - non-secret data that is provided to encryption and decryption operations to add an additional integrity and authenticity check on the encrypted data. Typically, the decrypt operation fails if the AAD (additional authenticated data) provided to the encrypt operation does not match the AAD provided to the decrypt operation.","title":"2. Web client"},{"location":"overview/security/#3-identity-provider-idp","text":"The idemeum IDP is responsible for authenticating user and requesting temporary, limited-privilege credentials from the AWS Security Token Service (AWS STS). This is done to create and provide trusted users with temporary security credentials that can control access to key management service. Access to key management service is required to encrypt and decrypt user claims by the encryption SDK in the idemeum web client as explained in the previous section. To use idemeum IDP, the first thing we do is to create an IAM identity provider entity to establish a trust relationship between the AWS account and the idemeum IDP. The trust is established using SAML 2.0 standards. At login time, the idemeum IDP creates a SAML assertion (as part of the authentication response) that is used to get the temporary security credentials from AWS STS. These credentials are generated dynamically when requested and are limited-privilege and short-term, as the name implies.","title":"3. Identity Provider (IDP)"},{"location":"overview/security/#4-key-management-service","text":"The data in AWS KMS consists of idemeum customer master key (CMK) and the encryption key material they represent. This key material exists in plaintext only within AWS KMS hardware security modules (HSMs) and only when in use. AWS KMS generates key material for idemeum customer master key (CMK) in FIPS 140-2 Level 2\u2013compliant hardware security modules (HSMs). When not in use, key material is encrypted by an HSM and written to durable, persistent storage. The key material for CMK and the encryption keys that protect the key material never leave the HSMs in plaintext form. The CMK is used by the encryption SDK to encrypt and decrypt data encryption keys (DEK's) that are used to encrypt and decrypt user claims. Since all the encryption operations happen in the web client, idemeum cloud does not have the appropriate permissions to decrypt the DEK\u2019s The access to the CMK is managed using key policy. The key policy does specify a specific role that should be assumed by temporary credentials in order to access the CMK. Access to CMK is also controlled by ABAC (attribute-based access control) and policy conditions that should be met before performing encryption operations.","title":"4. Key management service \ud83d\udd11"},{"location":"overview/security/#security-with-idemeum-app-login-flows","text":"We created idemeum app (decentralized, verified, mobile identity) with the purpose to enable people to own and control their digital identity 100%. idemeum app is decentralized, meaning no user information ( correct, absolutely no personally identifiable information (PII) ) is persisted in the cloud when idemeum app is set up. All identity claims are securely stored on a mobile device.","title":"Security with idemeum app login flows"},{"location":"overview/security/#decentralized-identifier-did","text":"In the idemeum app user DID is secured using public-key cryptography, where DID private key is managed in the secure hardware, such as Trusted Execution Environment (TEE) and dedicated Hardware Security Module (HSM).","title":"Decentralized Identifier (DID)"},{"location":"overview/security/#biometric-support","text":"idemeum app uses FIDO2 standards for supporting platform and roaming authenticators for user registration and authentication. Biometric validation is enforced when user logins into any service provider and also when managing the user cabinet.","title":"Biometric Support"},{"location":"overview/security/#verified-and-encrypted-claims","text":"Users manage their identity claims in the idemeum app. The claims (first name, last name, address, email, phone, and others) are identity proofed to ensure that claimed identity matches the actual identity. The claims are secured using symmetric cryptography where key material is managed in the TEE and HSM.","title":"Verified and Encrypted Claims"},{"location":"reference/android-guide/","text":"Go passwordless with Android SDK \u00b6 This integration guide will help you quickly implement passwordless login for your Android mobile application. Resources to help Here are all the resources that will help you navigate how idemeum Android SDK works, what user experience it empowers, and how you can drop it in quickly into your Android app. Android sample app GitHub source repo Download apk to try Integration overview \u00b6 Similar to our other SDKs, idemeum Android SDK provides 4 methods to help you with your login needs: login , logout , userClaims , isLoggedIn . By leveraging these methods you can enable passwordless, secure, and private login for your application. What we will do \u00b6 In this guide we will go through the following steps to implement idemeum Android SDK: Initialize idemeum SDK Manage authentication state with isLoggedIn Log the user in and out with login and logout Get and validate user claims with userClaims 1. Initialize idemeum SDK \u00b6 Add idemeum SDK dependency to gradle \u00b6 In your app's build.gradle dependencies section, add the following: 1 implementation ' com . idemeum : identity - android - sdk : 1.0.0 ' Create URL scheme \u00b6 Add URL scheme code in Android Manifest XML file. 1 2 3 4 5 6 7 8 9 < activity android : name = \"com.idemeum.androidsdk.ui.RedirectUriReceiverActivity\" android : exported = \"true\" > < intent - filter > < action android : name = \"android.intent.action.VIEW\" /> < category android : name = \"android.intent.category.DEFAULT\" /> < category android : name = \"android.intent.category.BROWSABLE\" /> < data android : host = \"auth\" android : scheme = \"idemeum\" /> </ intent - filter > </ activity > Initialize idemeum SDK \u00b6 We can now initialize the IdemeumManager instance of idemeum SDK. Do not forget to use your clientId that you obtained from idemeum developer portal. 1 2 //Replace clientId with the the one you get from idemeum developer portal IdemeumManager mIdemeumManager = IdemeumManager . getInstance ( \"ClientId\" ); 2. Manage user authentication state \u00b6 idemeum SDK helps you manage the authentication state of the user, so that you can determine if the user is logged in or not and then take actions depending on the outcome. With idemeum isLoggedIn we can obtain Boolean value for idemeum authentication state. If the user is logged in, we will greet the user and display user claims. In case the user is not logged in, we will not show any content and will simply display the login button. 1 2 3 4 5 6 7 8 9 10 11 mIdemeumManager . isLoggedIn ( this , isLoggedIn - > { // Process the user logged-in state. if ( isLoggedIn ) { // Validate ID token and display user claims if the user is logged in validateToken (); } else { // Display the login button if the user is NOT logged in showLoginButton (); } }); 3. Log the user in and out with login and logout methods \u00b6 When the user clicks the Login button, idemeum SDK will trigger the login method. Let's define what will need to happen in our application. On success our application will receive ID and Access tokens from idemeum. We will need to process and validate those tokens. In case there is failure, we can process that as well in our code. 1 2 3 4 5 6 7 8 9 10 11 12 13 mIdemeumManager . login ( this , new IdemeumSigninListener () { @Override public void onSuccess ( OIDCToken oidcToken ) { // Your application will receive ID and Access tokens from idemeum // validateToken() (defined below) validates the oidc token and // fetches the user approved claims validateToken (); } @Override public void onError ( int statusCode , String error ) { // If there is an error you can process it here } }); When the user clicks the Logout button, idemeum SDK will trigger the logout method. 1 mIdemeumManager . logout ( this ); 4. Validate and get user claims with userClaims \u00b6 idemeum SDK returns ID and Access tokens upon successful user login. For token validation you can: Validate token yourself using any of the open source JWT token validation libraries Use idemeum SDK that provides userClaims method to validate tokens and extract user claims In our guide we will rely on idemeum SDKs to validate tokens and extract user identity claims. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 private void validateToken () { // validate token mIdemeumManager . userClaims ( this , new TokenValidationListener () { @Override public void onSuccess ( JSONObject mClaims , String message ) { //user claims will be received as JSONObject here fetchDataFromClaims ( mClaims ); } @Override public void onError ( int errorCode , String errorMsg ) { // If there is an error you can process it here } }); } private String fetchDataFromClaims ( JSONObject mClaims ) { StringBuilder mStringBuilder = new StringBuilder (); mStringBuilder . append ( \"You are currently logged in.\" ) . append ( \"\\n\\n\" ) . append ( \"User profile:\" ) . append ( \"\\n\\n\" ); try { if ( mClaims . has ( \"given_name\" )) { mStringBuilder . append ( \"First Name: \" ). append ( mClaims . getString ( \"given_name\" )); mStringBuilder . append ( \"\\n\\n\" ); } if ( mClaims . has ( \"family_name\" )) { mStringBuilder . append ( \"Last Name: \" ). append ( mClaims . getString ( \"family_name\" )); mStringBuilder . append ( \"\\n\\n\" ); } if ( mClaims . has ( \"email\" )) { mStringBuilder . append ( \"Email Address: \" ). append ( mClaims . getString ( \"email\" )); mStringBuilder . append ( \"\\n\\n\" ); } } catch ( JSONException e ) { e . printStackTrace (); return mStringBuilder . toString (); } return mStringBuilder . toString (); } Congratulations ! You completed integration with idemeum Android SDK. Questions? \u00b6 Let us know if you need any help or have questions.","title":"Android guide"},{"location":"reference/android-guide/#go-passwordless-with-android-sdk","text":"This integration guide will help you quickly implement passwordless login for your Android mobile application. Resources to help Here are all the resources that will help you navigate how idemeum Android SDK works, what user experience it empowers, and how you can drop it in quickly into your Android app. Android sample app GitHub source repo Download apk to try","title":"Go passwordless with Android SDK"},{"location":"reference/android-guide/#integration-overview","text":"Similar to our other SDKs, idemeum Android SDK provides 4 methods to help you with your login needs: login , logout , userClaims , isLoggedIn . By leveraging these methods you can enable passwordless, secure, and private login for your application.","title":"Integration overview"},{"location":"reference/android-guide/#what-we-will-do","text":"In this guide we will go through the following steps to implement idemeum Android SDK: Initialize idemeum SDK Manage authentication state with isLoggedIn Log the user in and out with login and logout Get and validate user claims with userClaims","title":"What we will do"},{"location":"reference/android-guide/#1-initialize-idemeum-sdk","text":"","title":"1. Initialize idemeum SDK"},{"location":"reference/android-guide/#add-idemeum-sdk-dependency-to-gradle","text":"In your app's build.gradle dependencies section, add the following: 1 implementation ' com . idemeum : identity - android - sdk : 1.0.0 '","title":"Add idemeum SDK dependency to gradle"},{"location":"reference/android-guide/#create-url-scheme","text":"Add URL scheme code in Android Manifest XML file. 1 2 3 4 5 6 7 8 9 < activity android : name = \"com.idemeum.androidsdk.ui.RedirectUriReceiverActivity\" android : exported = \"true\" > < intent - filter > < action android : name = \"android.intent.action.VIEW\" /> < category android : name = \"android.intent.category.DEFAULT\" /> < category android : name = \"android.intent.category.BROWSABLE\" /> < data android : host = \"auth\" android : scheme = \"idemeum\" /> </ intent - filter > </ activity >","title":"Create URL scheme"},{"location":"reference/android-guide/#initialize-idemeum-sdk","text":"We can now initialize the IdemeumManager instance of idemeum SDK. Do not forget to use your clientId that you obtained from idemeum developer portal. 1 2 //Replace clientId with the the one you get from idemeum developer portal IdemeumManager mIdemeumManager = IdemeumManager . getInstance ( \"ClientId\" );","title":"Initialize idemeum SDK"},{"location":"reference/android-guide/#2-manage-user-authentication-state","text":"idemeum SDK helps you manage the authentication state of the user, so that you can determine if the user is logged in or not and then take actions depending on the outcome. With idemeum isLoggedIn we can obtain Boolean value for idemeum authentication state. If the user is logged in, we will greet the user and display user claims. In case the user is not logged in, we will not show any content and will simply display the login button. 1 2 3 4 5 6 7 8 9 10 11 mIdemeumManager . isLoggedIn ( this , isLoggedIn - > { // Process the user logged-in state. if ( isLoggedIn ) { // Validate ID token and display user claims if the user is logged in validateToken (); } else { // Display the login button if the user is NOT logged in showLoginButton (); } });","title":"2. Manage user authentication state"},{"location":"reference/android-guide/#3-log-the-user-in-and-out-with-login-and-logout-methods","text":"When the user clicks the Login button, idemeum SDK will trigger the login method. Let's define what will need to happen in our application. On success our application will receive ID and Access tokens from idemeum. We will need to process and validate those tokens. In case there is failure, we can process that as well in our code. 1 2 3 4 5 6 7 8 9 10 11 12 13 mIdemeumManager . login ( this , new IdemeumSigninListener () { @Override public void onSuccess ( OIDCToken oidcToken ) { // Your application will receive ID and Access tokens from idemeum // validateToken() (defined below) validates the oidc token and // fetches the user approved claims validateToken (); } @Override public void onError ( int statusCode , String error ) { // If there is an error you can process it here } }); When the user clicks the Logout button, idemeum SDK will trigger the logout method. 1 mIdemeumManager . logout ( this );","title":"3. Log the user in and out with login and logout methods"},{"location":"reference/android-guide/#4-validate-and-get-user-claims-with-userclaims","text":"idemeum SDK returns ID and Access tokens upon successful user login. For token validation you can: Validate token yourself using any of the open source JWT token validation libraries Use idemeum SDK that provides userClaims method to validate tokens and extract user claims In our guide we will rely on idemeum SDKs to validate tokens and extract user identity claims. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 private void validateToken () { // validate token mIdemeumManager . userClaims ( this , new TokenValidationListener () { @Override public void onSuccess ( JSONObject mClaims , String message ) { //user claims will be received as JSONObject here fetchDataFromClaims ( mClaims ); } @Override public void onError ( int errorCode , String errorMsg ) { // If there is an error you can process it here } }); } private String fetchDataFromClaims ( JSONObject mClaims ) { StringBuilder mStringBuilder = new StringBuilder (); mStringBuilder . append ( \"You are currently logged in.\" ) . append ( \"\\n\\n\" ) . append ( \"User profile:\" ) . append ( \"\\n\\n\" ); try { if ( mClaims . has ( \"given_name\" )) { mStringBuilder . append ( \"First Name: \" ). append ( mClaims . getString ( \"given_name\" )); mStringBuilder . append ( \"\\n\\n\" ); } if ( mClaims . has ( \"family_name\" )) { mStringBuilder . append ( \"Last Name: \" ). append ( mClaims . getString ( \"family_name\" )); mStringBuilder . append ( \"\\n\\n\" ); } if ( mClaims . has ( \"email\" )) { mStringBuilder . append ( \"Email Address: \" ). append ( mClaims . getString ( \"email\" )); mStringBuilder . append ( \"\\n\\n\" ); } } catch ( JSONException e ) { e . printStackTrace (); return mStringBuilder . toString (); } return mStringBuilder . toString (); } Congratulations ! You completed integration with idemeum Android SDK.","title":"4. Validate and get user claims with userClaims"},{"location":"reference/android-guide/#questions","text":"Let us know if you need any help or have questions.","title":"Questions?"},{"location":"reference/android-reference/","text":"Coming soon \u00b6","title":"Android"},{"location":"reference/android-reference/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/ios-guide/","text":"Go passwordless with iOS SDK \u00b6 This integration guide will help you quickly implement passwordless login for your iOS mobile application. Resources to help Here are all the resources that will help you navigate how idemeum iOS SDK works, what user experience it empowers, and how you can drop it in quickly into your iOS app. iOS sample app GitHub source repo Integration overview \u00b6 Similar to our other SDKs, idemeum iOS SDK provides 4 methods to help you with your login needs: login , logout , userClaims , isLoggedIn . By leveraging these methods you can enable passwordless, secure, and private login for your mobile application. What we will do \u00b6 In this guide we will go through the following steps to implement idemeum iOS SDK: Initialize idemeum SDK Manage authentication state with isLoggedIn Log the user in and out with login and logout Get and validate user claims with userClaims 1. Initialize idemeum SDK \u00b6 We will be using Cocoapods for our project. Here is what we will add to our Podfile : 1 pod ' idemeum \u2019 And then we will run pod install . Now, we can import and initialize the IdemeumManager instance of idemeum SDK. 1 2 3 4 5 6 7 8 9 10 import idemeum struct IdemeumKeys { //replace your clientID with the one you obtained from developer portal static var SingleSign = \"ClientId\" static var BioMetricKey = \"ClientId\" static var DVMIKey = \"Clientid\" } let idemeumSDK = Idemeum ( parentView : UIViewController (), clientId : \"\" ) 2. Manage authentication state with isLoggedIn \u00b6 idemeum SDK helps you manage the authentication state of the user, so that you can determine if the user is logged in or not and then take actions depending on the outcome. With idemeum isLoggedIn we can obtain Boolean value for idemeum authentication state. If the user is logged in, we will greet the user and display user claims. In case the user is not logged in, we will not show any content and will simply display the login button. 1 2 3 4 5 6 7 8 9 10 func isLoggedIn () { idemeumSDK . isLoggedIn ( completionHandler : { isLoggedIn in // Process the user logged-in state. if ( isLoggedIn ) { // Display user claims if the user is logged in self . getUserClaims () } else { // Display the login button if the user is NOT logged in } }) 3. Log the user in and out with login and logout \u00b6 When the user clicks the Login button, idemeum SDK will trigger the login method. Let's define what will need to happen in our application. On success our application will receive ID and Access tokens from idemeum. We will need to process and validate those tokens. In case there is failure, we can process that as well in our code. 1 2 3 4 5 6 7 8 9 10 11 func idemeumSignIn ( loginType : LoginType ) { idemeumSDK = Idemeum ( parentView : self , clientId : LoginMedium ( type : loginType ). key ) idemeumSDK . login { ( isSuccess , idemeumSigninResponse , error ) in if ( isSuccess ) { // Get User Claims. self . getUserClaims () } else { // If there is an error you can process it here self . displayAlert ( msg : error ?. errorMessage ?? \"Error occured.Pls tryagain\" ) } } } When the user clicks the Logout button, idemeum SDK will trigger the logout method. 1 idemeumSDK . logout () 4. Get and validate user claims with userClaims \u00b6 idemeum SDK returns ID and Access tokens upon successful user login. For token validation you can: Validate token yourself using any of the open source JWT token validation libraries Use idemeum SDK that provides userClaims method to validate tokens In our guide we will rely on idemeum SDKs to validate tokens and extract user identity claims. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 func getUserClaims (){ idemeumSDK . userClaims { ( isSuccess , response , error ) in if isSuccess { if let response = response as ? String { let responseDict = self . convertStringToDictionary ( text : response as String ) //user claims will be received as JSONObject here self . onUserResponseReceived ( response : responseDict !) } } else { //failed to get user claims self . displayAlert ( msg : error ?. errorMessage ?? \"Error occured..Pls try again\" ) } } } private func onUserResponseReceived ( response : Dictionary < String , Any >){ var email = \"\" var familyname = \"\" var jti = \"\" var aud = \"\" var given_name = \"\" var sub = \"\" if let emailResponse = response [ \"email\" ] as ? String { email = emailResponse } if let familyNameResponse = response [ \"family_name\" ] as ? String { familyname = familyNameResponse } if let jtiResponse = response [ \"jti\" ] as ? String { jti = jtiResponse } if let audResponse = response [ \"aud\" ] as ? String { aud = audResponse } if let given_nameResponse = response [ \"given_name\" ] as ? String { given_name = given_nameResponse } if let subResponse = response [ \"sub\" ] as ? String { sub = subResponse } DispatchQueue . main . async { let profileController = self . storyboard ?. instantiateViewController ( identifier : \"ProfileViewController\" ) as ? ProfileViewController profileController ?. user = User ( family_name : familyname , jti : jti , aud : aud , email : email , given_name : given_name , sub : sub ) self . navigationController ?. pushViewController ( profileController !, animated : true ) } } Congratulations ! You completed integration with idemeum iOS SDK. Questions? \u00b6 Let us know if you need any help or have questions.","title":"iOS guide"},{"location":"reference/ios-guide/#go-passwordless-with-ios-sdk","text":"This integration guide will help you quickly implement passwordless login for your iOS mobile application. Resources to help Here are all the resources that will help you navigate how idemeum iOS SDK works, what user experience it empowers, and how you can drop it in quickly into your iOS app. iOS sample app GitHub source repo","title":"Go passwordless with iOS SDK"},{"location":"reference/ios-guide/#integration-overview","text":"Similar to our other SDKs, idemeum iOS SDK provides 4 methods to help you with your login needs: login , logout , userClaims , isLoggedIn . By leveraging these methods you can enable passwordless, secure, and private login for your mobile application.","title":"Integration overview"},{"location":"reference/ios-guide/#what-we-will-do","text":"In this guide we will go through the following steps to implement idemeum iOS SDK: Initialize idemeum SDK Manage authentication state with isLoggedIn Log the user in and out with login and logout Get and validate user claims with userClaims","title":"What we will do"},{"location":"reference/ios-guide/#1-initialize-idemeum-sdk","text":"We will be using Cocoapods for our project. Here is what we will add to our Podfile : 1 pod ' idemeum \u2019 And then we will run pod install . Now, we can import and initialize the IdemeumManager instance of idemeum SDK. 1 2 3 4 5 6 7 8 9 10 import idemeum struct IdemeumKeys { //replace your clientID with the one you obtained from developer portal static var SingleSign = \"ClientId\" static var BioMetricKey = \"ClientId\" static var DVMIKey = \"Clientid\" } let idemeumSDK = Idemeum ( parentView : UIViewController (), clientId : \"\" )","title":"1. Initialize idemeum SDK"},{"location":"reference/ios-guide/#2-manage-authentication-state-with-isloggedin","text":"idemeum SDK helps you manage the authentication state of the user, so that you can determine if the user is logged in or not and then take actions depending on the outcome. With idemeum isLoggedIn we can obtain Boolean value for idemeum authentication state. If the user is logged in, we will greet the user and display user claims. In case the user is not logged in, we will not show any content and will simply display the login button. 1 2 3 4 5 6 7 8 9 10 func isLoggedIn () { idemeumSDK . isLoggedIn ( completionHandler : { isLoggedIn in // Process the user logged-in state. if ( isLoggedIn ) { // Display user claims if the user is logged in self . getUserClaims () } else { // Display the login button if the user is NOT logged in } })","title":"2. Manage authentication state with isLoggedIn"},{"location":"reference/ios-guide/#3-log-the-user-in-and-out-with-login-and-logout","text":"When the user clicks the Login button, idemeum SDK will trigger the login method. Let's define what will need to happen in our application. On success our application will receive ID and Access tokens from idemeum. We will need to process and validate those tokens. In case there is failure, we can process that as well in our code. 1 2 3 4 5 6 7 8 9 10 11 func idemeumSignIn ( loginType : LoginType ) { idemeumSDK = Idemeum ( parentView : self , clientId : LoginMedium ( type : loginType ). key ) idemeumSDK . login { ( isSuccess , idemeumSigninResponse , error ) in if ( isSuccess ) { // Get User Claims. self . getUserClaims () } else { // If there is an error you can process it here self . displayAlert ( msg : error ?. errorMessage ?? \"Error occured.Pls tryagain\" ) } } } When the user clicks the Logout button, idemeum SDK will trigger the logout method. 1 idemeumSDK . logout ()","title":"3. Log the user in and out with login and logout"},{"location":"reference/ios-guide/#4-get-and-validate-user-claims-with-userclaims","text":"idemeum SDK returns ID and Access tokens upon successful user login. For token validation you can: Validate token yourself using any of the open source JWT token validation libraries Use idemeum SDK that provides userClaims method to validate tokens In our guide we will rely on idemeum SDKs to validate tokens and extract user identity claims. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 func getUserClaims (){ idemeumSDK . userClaims { ( isSuccess , response , error ) in if isSuccess { if let response = response as ? String { let responseDict = self . convertStringToDictionary ( text : response as String ) //user claims will be received as JSONObject here self . onUserResponseReceived ( response : responseDict !) } } else { //failed to get user claims self . displayAlert ( msg : error ?. errorMessage ?? \"Error occured..Pls try again\" ) } } } private func onUserResponseReceived ( response : Dictionary < String , Any >){ var email = \"\" var familyname = \"\" var jti = \"\" var aud = \"\" var given_name = \"\" var sub = \"\" if let emailResponse = response [ \"email\" ] as ? String { email = emailResponse } if let familyNameResponse = response [ \"family_name\" ] as ? String { familyname = familyNameResponse } if let jtiResponse = response [ \"jti\" ] as ? String { jti = jtiResponse } if let audResponse = response [ \"aud\" ] as ? String { aud = audResponse } if let given_nameResponse = response [ \"given_name\" ] as ? String { given_name = given_nameResponse } if let subResponse = response [ \"sub\" ] as ? String { sub = subResponse } DispatchQueue . main . async { let profileController = self . storyboard ?. instantiateViewController ( identifier : \"ProfileViewController\" ) as ? ProfileViewController profileController ?. user = User ( family_name : familyname , jti : jti , aud : aud , email : email , given_name : given_name , sub : sub ) self . navigationController ?. pushViewController ( profileController !, animated : true ) } } Congratulations ! You completed integration with idemeum iOS SDK.","title":"4. Get and validate user claims with userClaims"},{"location":"reference/ios-guide/#questions","text":"Let us know if you need any help or have questions.","title":"Questions?"},{"location":"reference/ios-reference/","text":"Coming soon \u00b6","title":"iOS"},{"location":"reference/ios-reference/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/js-guide/","text":"Go passwordless with JavaScript SDK \u00b6 This integration guide will help you quickly implement passwordless login for your single-page application. Resources to help Here are all the resources that will help you navigate how idemeum JavaScript SDK works, what user experience it empowers, and how you can drop it in quickly into your SPA app. CodeSandbox demo GitHub source repo Live login flows demo Integration overview \u00b6 Our goal was to make idemeum SDK simple, yet powerful and flexible so that you can address the use cases you need. idemeum JS SDK provides 4 methods to help you with your login needs: login , logout , userClaims , isLoggedIn . By leveraging these methods you can enable passwordless, secure, and private login for your application. What we will do \u00b6 In this guide we will go through the following steps to implement idemeum JS SDK: Initialize idemeum SDK Manage authentication state with isLoggedIn Log the user in and out with login and logout Get and validate user claims with userClaims 1. Initialize idemeum SDK \u00b6 Basic HTML setup \u00b6 Our application will display a simple log in button. Upon clicking a button, user will be authenticated by idemeum. As a developer you can choose how to authenticate the user ( one-click , biometric , or mobile app ). Upon successful authentication JWT tokens will be returned to the application and the user will be greeted. As a first step, let's set up a simple index.html page that we will be using for our application. We will set up some very simple css styles in order to format how things are organized in our page. 1 2 3 4 5 6 7 8 9 10 11 12 13 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > idemeum JS SDK </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/src/styles.css\" /> </ head > < body > < h2 > idemeum JS authentication sample </ h2 > < h4 > Welcome to Application! </ h4 > < div id = \"initial\" > Loading... </ div > </ body > </ html > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /* our css style sheet that we save in styles.css and then import in out index page */ body { font-family : sans-serif ; } # initial { align-self : center ; justify-self : center ; background-color : #eee ; text-align : center ; width : 300 px ; padding : 27 px 18 px ; } Import idemeum JS SDK \u00b6 We can now import idemeum JavaScript SDK. For this guide we will simply import the script from idemeum CDN. 1 < script src = \"https://asset.idemeum.com/sdk/idemeum_1.0.0.min.js\" ></ script > Initialize idemeum SDK \u00b6 We can now initialize idemeum SDK instance. Do not forget to use your clientId that you obtained from idemeum developer portal. 1 2 3 4 var idemeum = new IdemeumManager ( // \ud83d\udc47 Replace clientId with the the one you get from idemeum developer portal ( clientId = \"00000000-0000-0000-0000-000000000000\" ) ); 2. Manage user authentication state \u00b6 idemeum SDK helps you manage the authentication state of the user, so that you can determine if the user is logged in or not and then take actions depending on the outcome. idemeum isLoggedIn returns Boolean value to identify the user authentication state. If the user is logged in, we will greet the user and display user claims. In case the user is not logged in, we will not show any content and will simply display the login button. As you can see in the code below we are simply using login method for button onclick event. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function isUserLoggedIn () { // Process the user logged-in state. We will create log out button and gated content. idemeum . isLoggedIn (). then ( function ( data ) { // Display user claims if the user is logged in renderUserClaims (); }, function ( errorData ) { // Display the login button if the user is NOT logged in html = `<button id=\"btn-login\" onclick=\"login()\">Log in</button>` ; document . getElementById ( \"initial\" ). innerHTML = html ; } ); } And we can trigger isUserLoggedIn() simply when the body of the document loads. 1 2 3 4 5 < body onload = \"setTimeout(function () { isUserLoggedIn(); }, 500);\" > 3. Log the user in \u00b6 When user clicks Log in button, idemeum SDK will trigger the login method. Let's define what will need to happen in our application. On success our application will receive ID and Access tokens from idemeum. We will need to process and validate those tokens. In case there is failure, we can process that as well in our code. 1 2 3 4 5 6 7 8 9 10 11 12 13 function login () { idemeum . login () . then ( function ( signinResponse ) { // Your application will receive ID and Access tokens from idemeum // renderUserClaims() (defined below) validates the oidc token and fetches the user approved claims renderUserClaims (); }) . catch ( function ( errorResponse ) { // If there is an error you can process it here console . log ( err ); }); } 4. Get and validate user claims \u00b6 idemeum SDK returns ID and Access tokens upon successful user login. For token validation you can: Validate token yourself using any of the open source JWT token validation libraries Use idemeum SDK that provides userClaims method to validate tokens In our guide we will rely on idemeum SDKs to validate tokens and extract user identity claims. In the code below we will take user claims (first name, last name, and email), and we will display these claims when the user is logged in. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 function renderUserClaims () { idemeum . userClaims () . then ( function ( userClaimsResponse ) { //fetch user approved claims from OIDC token htmlStart = `<div> <p align=\"left\">You are currently logged in.</p> <pre id=\"ipt-user-profile\" align=\"left\">User profile:<br>` ; htmlProfile = \"<b><h3 style='color:Tomato;'>First Name:\" + userClaimsResponse . given_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Last Name:\" + userClaimsResponse . family_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Email:\" + userClaimsResponse . email ; htmlEnd = ` </pre> </div> <button id=\"btn-logout\" onclick=\"idemeum.logout();isUserLoggedIn();\">Log out</button>` ; document . getElementById ( \"initial\" ). innerHTML = htmlStart + htmlProfile + htmlEnd ; }) . catch ( function ( errorResponse ) { // If there is an error you can process it here }); } We are done with our simple SPA application! Check the full working code example below. Full working example \u00b6 Here is the example of the full code we have discussed so far. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > idemeum JS SDK </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/src/styles.css\" /> < script src = \"https://asset.idemeum.com/sdk/idemeum_1.0.0.min.js\" ></ script > < script > // Sample to initialize idemeum JS SDK var idemeum = new IdemeumManager ( // \ud83d\udc47 Replace clientId with the the one you get from idemeum developer portal ( clientId = \"00000000-0000-0000-0000-000000000000\" ) ); // Sample to evaluate login state of the user function isUserLoggedIn () { // Process the user logged-in state. idemeum . isLoggedIn () . then ( function ( data ) { // Display user claims if the user is logged in renderUserClaims (); }) . catch ( function ( errorData ) { // Display the login button if the user is NOT logged in html = `<button id=\"btn-login\" onclick=\"login()\">Log in</button>` ; document . getElementById ( \"initial\" ). innerHTML = html ; }); } function login () { idemeum . login () . then ( function ( signinResponse ) { // Your application will receive ID and Access tokens from idemeum // renderUserClaims() (defined below) validates the oidc token and fetches the user approved claims renderUserClaims (); }) . catch ( function ( errorResponse ) { // If there is an error you can process it here console . log ( err ); }); } function renderUserClaims () { idemeum . userClaims () . then ( function ( userClaimsResponse ) { //fetch user approved claims from OIDC token htmlStart = `<div> <p align=\"left\">You are currently logged in.</p> <pre id=\"ipt-user-profile\" align=\"left\">User profile:<br>` ; htmlProfile = \"<b><h3 style='color:Tomato;'>First Name:\" + userClaimsResponse . given_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Last Name:\" + userClaimsResponse . family_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Email:\" + userClaimsResponse . email ; htmlEnd = ` </pre> </div> <button id=\"btn-logout\" onclick=\"idemeum.logout();isUserLoggedIn();\">Log out</button>` ; document . getElementById ( \"initial\" ). innerHTML = htmlStart + htmlProfile + htmlEnd ; }) . catch ( function ( errorResponse ) { // If there is an error you can process it here }); } </ script > </ head > < body onload = \"setTimeout(function () { isUserLoggedIn(); }, 500);\" > < h2 > idemeum JS authentication sample </ h2 > < h4 > Welcome to Application! </ h4 > < div id = \"initial\" >< p > Loading... </ p ></ div > </ body > </ html > Questions? \u00b6 Let us know if you need any help or have questions.","title":"JavaScript guide"},{"location":"reference/js-guide/#go-passwordless-with-javascript-sdk","text":"This integration guide will help you quickly implement passwordless login for your single-page application. Resources to help Here are all the resources that will help you navigate how idemeum JavaScript SDK works, what user experience it empowers, and how you can drop it in quickly into your SPA app. CodeSandbox demo GitHub source repo Live login flows demo","title":"Go passwordless with JavaScript SDK"},{"location":"reference/js-guide/#integration-overview","text":"Our goal was to make idemeum SDK simple, yet powerful and flexible so that you can address the use cases you need. idemeum JS SDK provides 4 methods to help you with your login needs: login , logout , userClaims , isLoggedIn . By leveraging these methods you can enable passwordless, secure, and private login for your application.","title":"Integration overview"},{"location":"reference/js-guide/#what-we-will-do","text":"In this guide we will go through the following steps to implement idemeum JS SDK: Initialize idemeum SDK Manage authentication state with isLoggedIn Log the user in and out with login and logout Get and validate user claims with userClaims","title":"What we will do"},{"location":"reference/js-guide/#1-initialize-idemeum-sdk","text":"","title":"1. Initialize idemeum SDK"},{"location":"reference/js-guide/#basic-html-setup","text":"Our application will display a simple log in button. Upon clicking a button, user will be authenticated by idemeum. As a developer you can choose how to authenticate the user ( one-click , biometric , or mobile app ). Upon successful authentication JWT tokens will be returned to the application and the user will be greeted. As a first step, let's set up a simple index.html page that we will be using for our application. We will set up some very simple css styles in order to format how things are organized in our page. 1 2 3 4 5 6 7 8 9 10 11 12 13 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > idemeum JS SDK </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/src/styles.css\" /> </ head > < body > < h2 > idemeum JS authentication sample </ h2 > < h4 > Welcome to Application! </ h4 > < div id = \"initial\" > Loading... </ div > </ body > </ html > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /* our css style sheet that we save in styles.css and then import in out index page */ body { font-family : sans-serif ; } # initial { align-self : center ; justify-self : center ; background-color : #eee ; text-align : center ; width : 300 px ; padding : 27 px 18 px ; }","title":"Basic HTML setup"},{"location":"reference/js-guide/#import-idemeum-js-sdk","text":"We can now import idemeum JavaScript SDK. For this guide we will simply import the script from idemeum CDN. 1 < script src = \"https://asset.idemeum.com/sdk/idemeum_1.0.0.min.js\" ></ script >","title":"Import idemeum JS SDK"},{"location":"reference/js-guide/#initialize-idemeum-sdk","text":"We can now initialize idemeum SDK instance. Do not forget to use your clientId that you obtained from idemeum developer portal. 1 2 3 4 var idemeum = new IdemeumManager ( // \ud83d\udc47 Replace clientId with the the one you get from idemeum developer portal ( clientId = \"00000000-0000-0000-0000-000000000000\" ) );","title":"Initialize idemeum SDK"},{"location":"reference/js-guide/#2-manage-user-authentication-state","text":"idemeum SDK helps you manage the authentication state of the user, so that you can determine if the user is logged in or not and then take actions depending on the outcome. idemeum isLoggedIn returns Boolean value to identify the user authentication state. If the user is logged in, we will greet the user and display user claims. In case the user is not logged in, we will not show any content and will simply display the login button. As you can see in the code below we are simply using login method for button onclick event. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function isUserLoggedIn () { // Process the user logged-in state. We will create log out button and gated content. idemeum . isLoggedIn (). then ( function ( data ) { // Display user claims if the user is logged in renderUserClaims (); }, function ( errorData ) { // Display the login button if the user is NOT logged in html = `<button id=\"btn-login\" onclick=\"login()\">Log in</button>` ; document . getElementById ( \"initial\" ). innerHTML = html ; } ); } And we can trigger isUserLoggedIn() simply when the body of the document loads. 1 2 3 4 5 < body onload = \"setTimeout(function () { isUserLoggedIn(); }, 500);\" >","title":"2. Manage user authentication state"},{"location":"reference/js-guide/#3-log-the-user-in","text":"When user clicks Log in button, idemeum SDK will trigger the login method. Let's define what will need to happen in our application. On success our application will receive ID and Access tokens from idemeum. We will need to process and validate those tokens. In case there is failure, we can process that as well in our code. 1 2 3 4 5 6 7 8 9 10 11 12 13 function login () { idemeum . login () . then ( function ( signinResponse ) { // Your application will receive ID and Access tokens from idemeum // renderUserClaims() (defined below) validates the oidc token and fetches the user approved claims renderUserClaims (); }) . catch ( function ( errorResponse ) { // If there is an error you can process it here console . log ( err ); }); }","title":"3. Log the user in"},{"location":"reference/js-guide/#4-get-and-validate-user-claims","text":"idemeum SDK returns ID and Access tokens upon successful user login. For token validation you can: Validate token yourself using any of the open source JWT token validation libraries Use idemeum SDK that provides userClaims method to validate tokens In our guide we will rely on idemeum SDKs to validate tokens and extract user identity claims. In the code below we will take user claims (first name, last name, and email), and we will display these claims when the user is logged in. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 function renderUserClaims () { idemeum . userClaims () . then ( function ( userClaimsResponse ) { //fetch user approved claims from OIDC token htmlStart = `<div> <p align=\"left\">You are currently logged in.</p> <pre id=\"ipt-user-profile\" align=\"left\">User profile:<br>` ; htmlProfile = \"<b><h3 style='color:Tomato;'>First Name:\" + userClaimsResponse . given_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Last Name:\" + userClaimsResponse . family_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Email:\" + userClaimsResponse . email ; htmlEnd = ` </pre> </div> <button id=\"btn-logout\" onclick=\"idemeum.logout();isUserLoggedIn();\">Log out</button>` ; document . getElementById ( \"initial\" ). innerHTML = htmlStart + htmlProfile + htmlEnd ; }) . catch ( function ( errorResponse ) { // If there is an error you can process it here }); } We are done with our simple SPA application! Check the full working code example below.","title":"4. Get and validate user claims"},{"location":"reference/js-guide/#full-working-example","text":"Here is the example of the full code we have discussed so far. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < title > idemeum JS SDK </ title > < link rel = \"stylesheet\" type = \"text/css\" href = \"/src/styles.css\" /> < script src = \"https://asset.idemeum.com/sdk/idemeum_1.0.0.min.js\" ></ script > < script > // Sample to initialize idemeum JS SDK var idemeum = new IdemeumManager ( // \ud83d\udc47 Replace clientId with the the one you get from idemeum developer portal ( clientId = \"00000000-0000-0000-0000-000000000000\" ) ); // Sample to evaluate login state of the user function isUserLoggedIn () { // Process the user logged-in state. idemeum . isLoggedIn () . then ( function ( data ) { // Display user claims if the user is logged in renderUserClaims (); }) . catch ( function ( errorData ) { // Display the login button if the user is NOT logged in html = `<button id=\"btn-login\" onclick=\"login()\">Log in</button>` ; document . getElementById ( \"initial\" ). innerHTML = html ; }); } function login () { idemeum . login () . then ( function ( signinResponse ) { // Your application will receive ID and Access tokens from idemeum // renderUserClaims() (defined below) validates the oidc token and fetches the user approved claims renderUserClaims (); }) . catch ( function ( errorResponse ) { // If there is an error you can process it here console . log ( err ); }); } function renderUserClaims () { idemeum . userClaims () . then ( function ( userClaimsResponse ) { //fetch user approved claims from OIDC token htmlStart = `<div> <p align=\"left\">You are currently logged in.</p> <pre id=\"ipt-user-profile\" align=\"left\">User profile:<br>` ; htmlProfile = \"<b><h3 style='color:Tomato;'>First Name:\" + userClaimsResponse . given_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Last Name:\" + userClaimsResponse . family_name + \"</h3></b><br>\" + \"<b><h3 style='color:Tomato;'>Email:\" + userClaimsResponse . email ; htmlEnd = ` </pre> </div> <button id=\"btn-logout\" onclick=\"idemeum.logout();isUserLoggedIn();\">Log out</button>` ; document . getElementById ( \"initial\" ). innerHTML = htmlStart + htmlProfile + htmlEnd ; }) . catch ( function ( errorResponse ) { // If there is an error you can process it here }); } </ script > </ head > < body onload = \"setTimeout(function () { isUserLoggedIn(); }, 500);\" > < h2 > idemeum JS authentication sample </ h2 > < h4 > Welcome to Application! </ h4 > < div id = \"initial\" >< p > Loading... </ p ></ div > </ body > </ html >","title":"Full working example"},{"location":"reference/js-guide/#questions","text":"Let us know if you need any help or have questions.","title":"Questions?"},{"location":"reference/js-reference/","text":"JavaScript SDK reference \u00b6 Class reference \u00b6 IdemeumManager OIDCToken IdemeumManager Class Reference \u00b6 Initialization \u00b6 IdemeumManager initialization Constructor : 1 IdemeumManager(String clientId) Description : Initialize the class member for accessing the member functions. Input params : 1 clientId: The clientId of the SDK procured from the Developer portal (dev_portal_link) Return : Returns the class instance initialized Success response : N/A Error response : N/A Member functions \u00b6 login() Description : Initiate the passwordless login flow Return : Promise Success response : OIDCToken instance Error codes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 Sample response: { \u201ccode\u201d:\u201dcode\u201d \u201cmessage\u201d:\u201dmessage\u201d } Code: 500 Message: Server side error. Please contact idemeum Code: 400 Message: Biometrics not enabled on your device Code: 404 Message: This browser does not support webauthn Code: 401 Message: Invalid token Code: 403 Message: Invalid CSRF token specified Code: 400 Message: Device does not support the biometric login Code: 400 Message: Fido Assertion validation error Code: 401 Message: User denied the login claims consent Code: 400 Message: User handle is missing or empty Code: 400 Message: Missing required claims Code: 400 Message: Attestation validation error Code: 403 Message: Attempted to re-use previously completed login session Code: 400 Message: Missing finger print header Code: 400 Message: Missing CSRF Header Code: 400 Message: Device fingerprint mismatch Code: 400 Message: Login challenge code expired. Try again userClaims() Description : Get the user claims after the login flow is completed or if the login session already exists and valid. Return : Promise Success response : OIDCToken instance 1 2 3 4 5 6 7 8 Sample response: { \"aud\" : \"string\" , \"email\" : \"string\" , \"family_name\" : \"string\" , \"given_name\" : \"string\" , \"jti\" : \"string\" , \"sub\" : \"string\" } Error response : error as JSONObject 1 2 3 4 5 6 7 8 9 10 11 12 13 Sample response: { \u201ccode\u201d:\u201dcode\u201d \u201cmessage\u201d:\u201dmessage\u201d } Code: 499 Message: Operation cancelled Code: 401 Message: Invalid token Code: 401 Message: User is not logged in isLoggedIn() Description : Identifies if the login session exists and is still valid. Return : Promise Success response : success bool value as true Error response : success bool value as false logout() Description : Logout of the current/existing login session. Return : void Success response : N/A Error response : N/A OIDCToken \u00b6 Public members Public members : 1 2 3 String accessToken String idToken long expires_in JSON : 1 2 3 4 5 { \"accessToken\" : \"string\" , \"expires_in\" : 0 , \"idToken\" : \"string\" }","title":"JavaScript"},{"location":"reference/js-reference/#javascript-sdk-reference","text":"","title":"JavaScript SDK reference"},{"location":"reference/js-reference/#class-reference","text":"IdemeumManager OIDCToken","title":"Class reference"},{"location":"reference/js-reference/#idemeummanager-class-reference","text":"","title":"IdemeumManager Class Reference"},{"location":"reference/js-reference/#initialization","text":"IdemeumManager initialization Constructor : 1 IdemeumManager(String clientId) Description : Initialize the class member for accessing the member functions. Input params : 1 clientId: The clientId of the SDK procured from the Developer portal (dev_portal_link) Return : Returns the class instance initialized Success response : N/A Error response : N/A","title":"Initialization"},{"location":"reference/js-reference/#member-functions","text":"login() Description : Initiate the passwordless login flow Return : Promise Success response : OIDCToken instance Error codes: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 Sample response: { \u201ccode\u201d:\u201dcode\u201d \u201cmessage\u201d:\u201dmessage\u201d } Code: 500 Message: Server side error. Please contact idemeum Code: 400 Message: Biometrics not enabled on your device Code: 404 Message: This browser does not support webauthn Code: 401 Message: Invalid token Code: 403 Message: Invalid CSRF token specified Code: 400 Message: Device does not support the biometric login Code: 400 Message: Fido Assertion validation error Code: 401 Message: User denied the login claims consent Code: 400 Message: User handle is missing or empty Code: 400 Message: Missing required claims Code: 400 Message: Attestation validation error Code: 403 Message: Attempted to re-use previously completed login session Code: 400 Message: Missing finger print header Code: 400 Message: Missing CSRF Header Code: 400 Message: Device fingerprint mismatch Code: 400 Message: Login challenge code expired. Try again userClaims() Description : Get the user claims after the login flow is completed or if the login session already exists and valid. Return : Promise Success response : OIDCToken instance 1 2 3 4 5 6 7 8 Sample response: { \"aud\" : \"string\" , \"email\" : \"string\" , \"family_name\" : \"string\" , \"given_name\" : \"string\" , \"jti\" : \"string\" , \"sub\" : \"string\" } Error response : error as JSONObject 1 2 3 4 5 6 7 8 9 10 11 12 13 Sample response: { \u201ccode\u201d:\u201dcode\u201d \u201cmessage\u201d:\u201dmessage\u201d } Code: 499 Message: Operation cancelled Code: 401 Message: Invalid token Code: 401 Message: User is not logged in isLoggedIn() Description : Identifies if the login session exists and is still valid. Return : Promise Success response : success bool value as true Error response : success bool value as false logout() Description : Logout of the current/existing login session. Return : void Success response : N/A Error response : N/A","title":"Member functions"},{"location":"reference/js-reference/#oidctoken","text":"Public members Public members : 1 2 3 String accessToken String idToken long expires_in JSON : 1 2 3 4 5 { \"accessToken\" : \"string\" , \"expires_in\" : 0 , \"idToken\" : \"string\" }","title":"OIDCToken"},{"location":"reference/sdkoverview/","text":"Start building passwordless with idemeum \u00b6 What app are you building? idemeum makes it very easy to go passwordless with your apps. Choose SDK based on the application you're building - single-page , dynamic , or mobile application. For each SDK we will provide: Integration guide - for you to see how you can go passwordless in minutes. Sample app - so you can play with it and see the user experience. SDK source repo - so you can see how we did it. Single-page application \u00b6 SDK Integration guide Sample app Repo Live demo JavaScript Guide CodeSandbox Source Live demo Mobile application \u00b6 SDK Integration guide Sample app Repo Download Android Guide Sample app Source APK download iOS Guide Sample app Source","title":"Overview"},{"location":"reference/sdkoverview/#start-building-passwordless-with-idemeum","text":"What app are you building? idemeum makes it very easy to go passwordless with your apps. Choose SDK based on the application you're building - single-page , dynamic , or mobile application. For each SDK we will provide: Integration guide - for you to see how you can go passwordless in minutes. Sample app - so you can play with it and see the user experience. SDK source repo - so you can see how we did it.","title":"Start building passwordless with idemeum"},{"location":"reference/sdkoverview/#single-page-application","text":"SDK Integration guide Sample app Repo Live demo JavaScript Guide CodeSandbox Source Live demo","title":"Single-page application"},{"location":"reference/sdkoverview/#mobile-application","text":"SDK Integration guide Sample app Repo Download Android Guide Sample app Source APK download iOS Guide Sample app Source","title":"Mobile application"}]}