{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Documentation Portal idemeum is a passwordless and private digital identity platform. Drop in SDK to enable one-click, biometric, or mobile app based login for you web and mobile app users. Implement login in minutes using self configuration portal Reduce friction and improve conversion for your users Offer users privacy and control of their digital identity What is idemeum? Identity Platform Application developers outsource login flows end to end to us. We do not provide you with numerous tools, SDKs, and APIs to built embedded auth. We value your time and abstract all this complexity: implementing auth flows, security, scalability, privacy. We give you one SDK to connect to idemeum and implement auth for your apps. Identity Provider idemeum is an Identity Provider (IDP) . We provide Single Sign-On to user across applications and domains. Once users login with idemeum to an application, the session gets created, so that users can seamlessly login to any other application that supports idemeum. Passwordless No traditional login experience for idemeum. We are passwordless end to end. Our goal is to remove friction for your users and help you build trusted relationship with your customers. Private by design We are the only SSO Identity Provider that offers users privacy with their digital identity. No, we do not use blockchain \ud83d\ude00. With our mobile app we offer a decentralized model where digital identity data is only stored on users' devices. With our cloud we also designed a privacy preserving infrastructure so that only end users have access to their data. Read more . idemeum login flows To achieve our vision, we developed a platform that offers several passwordless services. Check our documentation to learn more about each flow. We also have a comparison table here. One-click login Simplest form of authenticating idemeum users into web, native, and mobile applications. One click login leverages asymmetric crypto key pair to authenticate users. Biometric login Seamless authentication coupled with security of biometrics. Biometric login is based on FIDO2/Webauthn behind the scenes. Login with idemeum app Most secure, and most importantly 100% private authentication method. Your phone becomes your personal identity hub - all identity claims and information are stored in the idemeum app only.","title":"What is idemeum?"},{"location":"#welcome-to-documentation-portal","text":"idemeum is a passwordless and private digital identity platform. Drop in SDK to enable one-click, biometric, or mobile app based login for you web and mobile app users. Implement login in minutes using self configuration portal Reduce friction and improve conversion for your users Offer users privacy and control of their digital identity","title":"Welcome to Documentation Portal"},{"location":"#what-is-idemeum","text":"","title":"What is idemeum?"},{"location":"#identity-platform","text":"Application developers outsource login flows end to end to us. We do not provide you with numerous tools, SDKs, and APIs to built embedded auth. We value your time and abstract all this complexity: implementing auth flows, security, scalability, privacy. We give you one SDK to connect to idemeum and implement auth for your apps.","title":"Identity Platform"},{"location":"#identity-provider","text":"idemeum is an Identity Provider (IDP) . We provide Single Sign-On to user across applications and domains. Once users login with idemeum to an application, the session gets created, so that users can seamlessly login to any other application that supports idemeum.","title":"Identity Provider"},{"location":"#passwordless","text":"No traditional login experience for idemeum. We are passwordless end to end. Our goal is to remove friction for your users and help you build trusted relationship with your customers.","title":"Passwordless"},{"location":"#private-by-design","text":"We are the only SSO Identity Provider that offers users privacy with their digital identity. No, we do not use blockchain \ud83d\ude00. With our mobile app we offer a decentralized model where digital identity data is only stored on users' devices. With our cloud we also designed a privacy preserving infrastructure so that only end users have access to their data. Read more .","title":"Private by design"},{"location":"#idemeum-login-flows","text":"To achieve our vision, we developed a platform that offers several passwordless services. Check our documentation to learn more about each flow. We also have a comparison table here.","title":"idemeum login flows"},{"location":"#one-click-login","text":"Simplest form of authenticating idemeum users into web, native, and mobile applications. One click login leverages asymmetric crypto key pair to authenticate users.","title":"One-click login"},{"location":"#biometric-login","text":"Seamless authentication coupled with security of biometrics. Biometric login is based on FIDO2/Webauthn behind the scenes.","title":"Biometric login"},{"location":"#login-with-idemeum-app","text":"Most secure, and most importantly 100% private authentication method. Your phone becomes your personal identity hub - all identity claims and information are stored in the idemeum app only.","title":"Login with idemeum app"},{"location":"azuread/","text":"Integrate idemeum with Azure AD (B2B) .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure O365? idemeum integrates with Azure Active Directory (AAD) directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO and O365 resources. No enrollment, no user sync, easy and simple. idemeum supports cloud-only as well as hybrid deployment models. How is O365 deployed? O365 and Azure Active Directory (AAD) can be implemented with various deployment models . Deployment model Definition Cloud only identity User account only exists in the Azure AD tenant for your Microsoft 365 subscription. Hybrid identity User account exists in AD DS and a copy is also in the Azure AD tenant for your Microsoft 365 subscription. The user account in Azure AD might also include a hashed version of the already hashed AD DS user account password. For authentication there are several options: password hash synchronization , pass-through authentication , and federation with ADFS . How is idemeum integrated with O365? idemeum can be federated directly with AAD using SAML protocol. When federating directly with Azure AD, idemeum can support cloud only as well as hybrid (password sync and pass-through) models. Integrate idemeum with Azure AD We are going to go through simple three steps to integrate idemeum with your Microsoft identity environment. Request idemeum tenant Configure Azure AD for federation Test user sign-in All additional Microsoft documentation and useful links can be found in footnotes . \u2699\ufe0f 1. Request idemeum tenant As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Azure AD. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result of tenant provisioning we will share the configuration details with you, so that you can later use them in your Azure AD configuration: $LogOnUrl - SAML LogOn URL. $LogOffUrl - SAML LogOff URL. $SigningCert - signing certificate to establish federation trust. $IssuerUri - URI to identify idemeum in SAML responses. Tip You can always get this and additional information from your SAML metadata XML file. You can access this information by using the following link https://<your tenant name>/api/saml/metadata/idp.xml . Replace [your tenant name] with your actual tenant name that we will provision for you. \ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc 2. Configure Azure AD for federation After signing up for Office 365, the only domain associated with your account is the onmicrosoft.com subdomain chosen during registration (for example, contoso.onmicrosoft.com ). To allow users to SSO to Azure AD and Office 365, it is recommended to have another domain added to the environment. If you already have such domain added and verified, you can always use that. Make sure you have admin account with another domain Once you configure Azure AD domain to be federated, you will no longer be able to use local login into accounts associated with that domain. Therefore, if something is wrong with the configuration, you might lock yourself out. To prevent that, make sure you have admin account created on other domain (for instance on your onmicrosoft.com domain), so that you can always use that account to log in and revert federation configuration. We will be using PowerShell to configure the Azure AD domain for federation 1 . Launch PowerShell on a Windows machine Install MSOnline PowerShell module if you have not already 1 Install-Module MSOnline Connect to MSOnline service. You will need to authenticate with your Azure AD Portal admin credentials 1 Connect-MsolService You can check your existing domains and their federation settings 1 Get-MsolDomain Check your current domain federation settings. If the current setting is federated , you will need to first convert domain to `managed' setting 1 Get-MsolDomainFederationSettings 1 Set-MsolDomainAuthentication -DomainName < yourdomain > -Authentication managed Now you can configure your domain with federation settings. Take a look at the example below. $Domain - the domain that you are planning to federate with idemeum $BrandName - the name that you will use for federation $LogOnUrl - this is a SAML LogOn URL. We will share this URL with you as part of onboarding. $LogOffUrl - this is a SAML LogOff URL. We will share this URL with you as part of onboarding $SigningCert - signing certificate to establish federation trust. We will share this certificate with you as part of onboarding. $IssuerUri - URI that identifies idemeum as SAML issuer. $Protocol - protocol to use for federation. In our case it is SAML 1 2 3 4 5 6 7 8 9 $Domain = \"idemeumlab.com\" $BrandName = \"idemeum\" $LogOnUrl = \"https://myhospital.idemeum.com/api/saml/sso\" $LogOffUrl = \"https://myhospital.idemeum.com/api/saml/slo\" $SigningCert = \"MIIC9DCCAdygAwIBAgIIPKj+xeu3fLQwDQYJKoZIhvcNAQELBQAwOjEMMAoGA1UEBhMDVVNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFjAUBgNVBAMMDSouaWRlbWV1bS5jb20wHhcNMjAxMjI5MjMwMjUxWhcNMzAxMjI3MjMwMjUxWjA6MQwwCgYDVQQGEwNVU0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEWMBQGA1UEAwwNKi5pZGVtZXVtLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIVX288afPVD2Xhr+Zmc0BCbCVZumwYOFAjp659jytT8kpBuGXdu7A6CYE7CxVc4NeiwaDmteNp3x1INDBS+TSfHkWCNh+6sUhY4jyZVajuGJOCna4+NB2GLx4hl9+AzjfzKQBTT7CNoDLfGvE8ZtUdItCYrBIG8q37Z/2D3zLS90bmomQEGTzy45ckZ1+Q0nyHEikj3hrqUVotTr0ivylmRLj0Qnup3Eh0s8l5Lvb9VYauhL4KyqVqFnYv57Qg22+d6ZOCn6at6AiZbG8wlF5d/uppu6l3rigSKOFewK9rVwhGxTbgP2JZeCdXuDs5+d6b6zS0dfSQpgzyEy/Jmw0CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWVG0ufqrF9oBYCBzm68i2di2IuEMhF2gW5ixcVgjfLLpnFrT0Lkt4taF+32ykNU9kram/SjSHF2+hJoBZ4BBQYIMXyA9TFn1bcn7LOq8uiDS/cF9noHlYrxOboq0qc38R4wkjSOEOFhs98zhRz2IPUccvwgfoiQZS3lt12Gb8KcZPaGKVnoxunpe7mQj69WkiKgBJLR2G4ODIX+FY01zwz7coplqYMOohTgOV/ej1BloWVWHFTkXKDtIgeuyQWGnJ3gBjDzmB5XwxvxA0NNCZVzhO23S0z/rn8eqKQ6obkabZUILurOeBC4wKEH314sbtOIP0NTI+Xc5LpbOwonhVQ==\" $IssuerUri = \"https://myhospital.idemeum.com/api/saml/metadata/idp.xml\" $Protocol = \"SAMLP\" Set-MsolDomainAuthentication -DomainName $Domain -FederationBrandName $BrandName -Authentication federated -PassiveLogOnUri $LogOnUrl -SigningCertificate $SigningCert -IssuerUri $IssuerUri -LogOffUri $LogOffUrl -PreferredAuthenticationProtocol $Protocol Verify that the settings are successfully configured for your domain. 1 Get-MsolDomainFederationSettings -DomainName < your domain here > | format-list * \ud83e\uddea 3. Test user sign in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to portal.office.com Enter the email address of the account that you would like to sign into. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to office 365. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your O365 deployment with passwordless authentication. Microsoft documentation - Configure SAML federation provider \u21a9 Azure AD SAML metadata \u21a9 MSOnline reference documentation \u21a9 Contact idemeum for any support questions \u21a9","title":"Azure AD (B2B)"},{"location":"azuread/#integrate-idemeum-with-azure-ad-b2b","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":" Integrate idemeum with Azure AD (B2B)"},{"location":"azuread/#how-can-idemeum-help-secure-o365","text":"idemeum integrates with Azure Active Directory (AAD) directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO and O365 resources. No enrollment, no user sync, easy and simple. idemeum supports cloud-only as well as hybrid deployment models.","title":"How can idemeum help secure O365?"},{"location":"azuread/#how-is-o365-deployed","text":"O365 and Azure Active Directory (AAD) can be implemented with various deployment models . Deployment model Definition Cloud only identity User account only exists in the Azure AD tenant for your Microsoft 365 subscription. Hybrid identity User account exists in AD DS and a copy is also in the Azure AD tenant for your Microsoft 365 subscription. The user account in Azure AD might also include a hashed version of the already hashed AD DS user account password. For authentication there are several options: password hash synchronization , pass-through authentication , and federation with ADFS .","title":"How is O365 deployed?"},{"location":"azuread/#how-is-idemeum-integrated-with-o365","text":"idemeum can be federated directly with AAD using SAML protocol. When federating directly with Azure AD, idemeum can support cloud only as well as hybrid (password sync and pass-through) models.","title":"How is idemeum integrated with O365?"},{"location":"azuread/#integrate-idemeum-with-azure-ad","text":"We are going to go through simple three steps to integrate idemeum with your Microsoft identity environment. Request idemeum tenant Configure Azure AD for federation Test user sign-in All additional Microsoft documentation and useful links can be found in footnotes .","title":"Integrate idemeum with Azure AD"},{"location":"azuread/#1-request-idemeum-tenant","text":"As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Azure AD. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result of tenant provisioning we will share the configuration details with you, so that you can later use them in your Azure AD configuration: $LogOnUrl - SAML LogOn URL. $LogOffUrl - SAML LogOff URL. $SigningCert - signing certificate to establish federation trust. $IssuerUri - URI to identify idemeum in SAML responses. Tip You can always get this and additional information from your SAML metadata XML file. You can access this information by using the following link https://<your tenant name>/api/saml/metadata/idp.xml . Replace [your tenant name] with your actual tenant name that we will provision for you.","title":"\u2699\ufe0f 1. Request idemeum tenant"},{"location":"azuread/#2-configure-azure-ad-for-federation","text":"After signing up for Office 365, the only domain associated with your account is the onmicrosoft.com subdomain chosen during registration (for example, contoso.onmicrosoft.com ). To allow users to SSO to Azure AD and Office 365, it is recommended to have another domain added to the environment. If you already have such domain added and verified, you can always use that. Make sure you have admin account with another domain Once you configure Azure AD domain to be federated, you will no longer be able to use local login into accounts associated with that domain. Therefore, if something is wrong with the configuration, you might lock yourself out. To prevent that, make sure you have admin account created on other domain (for instance on your onmicrosoft.com domain), so that you can always use that account to log in and revert federation configuration. We will be using PowerShell to configure the Azure AD domain for federation 1 . Launch PowerShell on a Windows machine Install MSOnline PowerShell module if you have not already 1 Install-Module MSOnline Connect to MSOnline service. You will need to authenticate with your Azure AD Portal admin credentials 1 Connect-MsolService You can check your existing domains and their federation settings 1 Get-MsolDomain Check your current domain federation settings. If the current setting is federated , you will need to first convert domain to `managed' setting 1 Get-MsolDomainFederationSettings 1 Set-MsolDomainAuthentication -DomainName < yourdomain > -Authentication managed Now you can configure your domain with federation settings. Take a look at the example below. $Domain - the domain that you are planning to federate with idemeum $BrandName - the name that you will use for federation $LogOnUrl - this is a SAML LogOn URL. We will share this URL with you as part of onboarding. $LogOffUrl - this is a SAML LogOff URL. We will share this URL with you as part of onboarding $SigningCert - signing certificate to establish federation trust. We will share this certificate with you as part of onboarding. $IssuerUri - URI that identifies idemeum as SAML issuer. $Protocol - protocol to use for federation. In our case it is SAML 1 2 3 4 5 6 7 8 9 $Domain = \"idemeumlab.com\" $BrandName = \"idemeum\" $LogOnUrl = \"https://myhospital.idemeum.com/api/saml/sso\" $LogOffUrl = \"https://myhospital.idemeum.com/api/saml/slo\" $SigningCert = \"MIIC9DCCAdygAwIBAgIIPKj+xeu3fLQwDQYJKoZIhvcNAQELBQAwOjEMMAoGA1UEBhMDVVNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFjAUBgNVBAMMDSouaWRlbWV1bS5jb20wHhcNMjAxMjI5MjMwMjUxWhcNMzAxMjI3MjMwMjUxWjA6MQwwCgYDVQQGEwNVU0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEWMBQGA1UEAwwNKi5pZGVtZXVtLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMIVX288afPVD2Xhr+Zmc0BCbCVZumwYOFAjp659jytT8kpBuGXdu7A6CYE7CxVc4NeiwaDmteNp3x1INDBS+TSfHkWCNh+6sUhY4jyZVajuGJOCna4+NB2GLx4hl9+AzjfzKQBTT7CNoDLfGvE8ZtUdItCYrBIG8q37Z/2D3zLS90bmomQEGTzy45ckZ1+Q0nyHEikj3hrqUVotTr0ivylmRLj0Qnup3Eh0s8l5Lvb9VYauhL4KyqVqFnYv57Qg22+d6ZOCn6at6AiZbG8wlF5d/uppu6l3rigSKOFewK9rVwhGxTbgP2JZeCdXuDs5+d6b6zS0dfSQpgzyEy/Jmw0CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWVG0ufqrF9oBYCBzm68i2di2IuEMhF2gW5ixcVgjfLLpnFrT0Lkt4taF+32ykNU9kram/SjSHF2+hJoBZ4BBQYIMXyA9TFn1bcn7LOq8uiDS/cF9noHlYrxOboq0qc38R4wkjSOEOFhs98zhRz2IPUccvwgfoiQZS3lt12Gb8KcZPaGKVnoxunpe7mQj69WkiKgBJLR2G4ODIX+FY01zwz7coplqYMOohTgOV/ej1BloWVWHFTkXKDtIgeuyQWGnJ3gBjDzmB5XwxvxA0NNCZVzhO23S0z/rn8eqKQ6obkabZUILurOeBC4wKEH314sbtOIP0NTI+Xc5LpbOwonhVQ==\" $IssuerUri = \"https://myhospital.idemeum.com/api/saml/metadata/idp.xml\" $Protocol = \"SAMLP\" Set-MsolDomainAuthentication -DomainName $Domain -FederationBrandName $BrandName -Authentication federated -PassiveLogOnUri $LogOnUrl -SigningCertificate $SigningCert -IssuerUri $IssuerUri -LogOffUri $LogOffUrl -PreferredAuthenticationProtocol $Protocol Verify that the settings are successfully configured for your domain. 1 Get-MsolDomainFederationSettings -DomainName < your domain here > | format-list *","title":"\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c\udffc 2. Configure Azure AD for federation"},{"location":"azuread/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to portal.office.com Enter the email address of the account that you would like to sign into. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to office 365. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your O365 deployment with passwordless authentication. Microsoft documentation - Configure SAML federation provider \u21a9 Azure AD SAML metadata \u21a9 MSOnline reference documentation \u21a9 Contact idemeum for any support questions \u21a9","title":"\ud83e\uddea 3. Test user sign in"},{"location":"gethelp/","text":"We are always here to help If you have any questions, we are always here to help. You can always drop us a note at support@idemeum.com . Join our slack channel as well. It so much more than just questions. We will share the news product updates, and just share our knowledge about the world of identity.","title":"Help"},{"location":"gethelp/#we-are-always-here-to-help","text":"If you have any questions, we are always here to help. You can always drop us a note at support@idemeum.com . Join our slack channel as well. It so much more than just questions. We will share the news product updates, and just share our knowledge about the world of identity.","title":"We are always here to help"},{"location":"google/","text":"Integrate idemeum with Google workspace .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Google Workspace deployments? idemeum integrates with Google Cloud Identity directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. How does the integration work? idemeum integrates with Google Cloud Identity in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active or LDAP directory, or deploy any additional servers and connectors. Simply federate your Google Cloud Identity tenant with idemeum over SAML protocol. \ud83d\udc68\u200d\ud83d\udcbb In the diagram above, we see the deployment where Google Cloud Identity is deployed as a primary IDP and all applications are federated directly with it. When user is trying to authenticate to any corporate application or Google Workspace, the sign in request is sent first to Google Cloud Identity, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Google Cloud Identity, which in turn forwards that user information to federated application. As a result users can access application without any passwords. Integrate idemeum with Google Cloud Identity We are going to go through simple three steps to integrate idemeum with your Google Workspace environment. Request idemeum tenant Configure Google Cloud Identity for federation Test user sign-in 1. \ud83e\udd1d Request idemeum tenant \ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Google Workspace. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result, we will share the following with you: IdP Single Sign-On URL - you will need this URI to configure Google Cloud Identity federation with idemeum. This is the URL where Google Cloud Identity will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Google Cloud Identity and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file. 2. \u2699\ufe0f Configure Google Cloud Identity for federation Sign in to your Google Workspace Admin portal Navigate to Security , scroll down and find the section Set up single sign-on (SSO) with a third party IdP . Click on that section to set up idemeum as 3rd party IDP. Configure the following settings: Set up SSO with third-party identity provider - enable checkbox Sign-in page URL - enter the URL that we shared with you after tenant creation. You can always get that data from your idemeum SAML XML file. Sign-out page URL - enter https://accounts.google.com Verification certificate - upload the certificate that we shared with you. You can always get that data from your idemeum SAML XML file. Leave other fields blank. Click Save At this point you configured idemeum to become 3rd party IDP for Google Cloud Identity, and all authentication requests for your domain will be redirected to idemeum. Note Authentication for admin console with Admin credentials is still handled by Google Cloud identity. All you need to do it to navigate to https://admin.google.com/u/0/ac/home and login with your admin credentials. Please refer to documentation here . 3. \ud83e\uddea Test user sign-in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your accounts.google.com/ . Enter your email address with you domain, and you will be redirected to idemeum for sign in. You will need to scan QR code with idemeum app. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Google Workspace application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Google Workspace deployment with passwordless multi-factor authentication. Set up SSO via a third party Identity provider \u21a9 Understanding SAML secure sign-in \u21a9 SSO assertion requirements \u21a9","title":"Google Cloud Identity"},{"location":"google/#integrate-idemeum-with-google-workspace","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":" Integrate idemeum with Google workspace"},{"location":"google/#how-can-idemeum-help-secure-google-workspace-deployments","text":"idemeum integrates with Google Cloud Identity directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple.","title":"How can idemeum help secure Google Workspace deployments?"},{"location":"google/#how-does-the-integration-work","text":"idemeum integrates with Google Cloud Identity in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active or LDAP directory, or deploy any additional servers and connectors. Simply federate your Google Cloud Identity tenant with idemeum over SAML protocol. \ud83d\udc68\u200d\ud83d\udcbb In the diagram above, we see the deployment where Google Cloud Identity is deployed as a primary IDP and all applications are federated directly with it. When user is trying to authenticate to any corporate application or Google Workspace, the sign in request is sent first to Google Cloud Identity, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Google Cloud Identity, which in turn forwards that user information to federated application. As a result users can access application without any passwords.","title":"How does the integration work?"},{"location":"google/#integrate-idemeum-with-google-cloud-identity","text":"We are going to go through simple three steps to integrate idemeum with your Google Workspace environment. Request idemeum tenant Configure Google Cloud Identity for federation Test user sign-in","title":"Integrate idemeum with Google Cloud Identity"},{"location":"google/#1-request-idemeum-tenant","text":"\ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Google Workspace. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. As a result, we will share the following with you: IdP Single Sign-On URL - you will need this URI to configure Google Cloud Identity federation with idemeum. This is the URL where Google Cloud Identity will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Google Cloud Identity and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file.","title":"1. \ud83e\udd1d Request idemeum tenant"},{"location":"google/#2-configure-google-cloud-identity-for-federation","text":"Sign in to your Google Workspace Admin portal Navigate to Security , scroll down and find the section Set up single sign-on (SSO) with a third party IdP . Click on that section to set up idemeum as 3rd party IDP. Configure the following settings: Set up SSO with third-party identity provider - enable checkbox Sign-in page URL - enter the URL that we shared with you after tenant creation. You can always get that data from your idemeum SAML XML file. Sign-out page URL - enter https://accounts.google.com Verification certificate - upload the certificate that we shared with you. You can always get that data from your idemeum SAML XML file. Leave other fields blank. Click Save At this point you configured idemeum to become 3rd party IDP for Google Cloud Identity, and all authentication requests for your domain will be redirected to idemeum. Note Authentication for admin console with Admin credentials is still handled by Google Cloud identity. All you need to do it to navigate to https://admin.google.com/u/0/ac/home and login with your admin credentials. Please refer to documentation here .","title":"2. \u2699\ufe0f Configure Google Cloud Identity for federation"},{"location":"google/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your accounts.google.com/ . Enter your email address with you domain, and you will be redirected to idemeum for sign in. You will need to scan QR code with idemeum app. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Google Workspace application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Google Workspace deployment with passwordless multi-factor authentication. Set up SSO via a third party Identity provider \u21a9 Understanding SAML secure sign-in \u21a9 SSO assertion requirements \u21a9","title":"3. \ud83e\uddea Test user sign-in"},{"location":"okta/","text":"Integrate idemeum with Okta .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Okta deployments? idemeum integrates with Okta directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. Verified log in idemeum has built in document verification. When integrated with Okta, idemeum can log in users not just using their email address, but also verified first name and last name, whereby making every login trusted and verified and reducing identity fraud. How does the integration work? idemeum integrates with Okta in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Okta tenant with idemeum over SAML protocol. In the diagram above, we see the deployment where Okta is deployed as a primary IDP and all applications are federated directly with Okta. When user is trying to authenticate to any corporate application, the sign in request is sent first to Okta, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Okta, which in turn forwards that user information to federated application. As a result users can access application without any passwords. idemeum differentiation The key difference to note here is that you can configure idemeum to release not just email, but also first name and last name for employee. When all these claims are processed for authentication, the match is done not just with email but with verified ID document information. Therefore, every login becomes trusted. Integrate idemeum with Okta We are going to go through simple four steps to integrate idemeum with your Okta identity environment. Request idemeum tenant Set up verified login (optional) Configure Okta for federation Test user sign-in 1. \ud83e\udd1d Request idemeum tenant \ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Okta and whether you want to use verified login or not. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. Okta SAML IDP metadata - we will need your Okta IDP metadata file, so that we can configure SAML trust on our end. As a result, we will share the following with you: IDP issuer URI - you will need this URI to configure Okta federation with idemeum. This URI can always be extracted from your idemeum SAML metadata file. IdP Single Sign-On URL - you will need this URI to configure Okta federation with idemeum. This is the URL where Okta will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Okta and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file. 2. \u2714\ufe0f Set up verified login This step is optional. You can login your users and match the account using only email address. This is what most of the commercial identity solutions do today. However, idemeum offers an opportunity to increase identity trust and login your users with not just email, but a combination of email + firstName + lastName . To make it work, we will need to create a custom attribute for Okta users, say verifiedIdentity and populate it with a combination of email + firstName + lastName. When idemeum will return verified user claims, Okta will match them against this custom attribute. In this case we are going to be working with Active Directory users that you are synchronizing to Okta tenant. Login to your Okta tenant with admin account Navigate to Directory -> Profile editor Choose User(default) profile, click Add Attribute and create custom attribute that you will be using for user matching. In our case we are creating an attribute with the display name Verified Identity and variable name verifiedIdentity . We are not making this attribute required. Now navigate to Directory -> Profile editor and then choose your Active Directory integration and click Mappings . Scroll all the way down to find custom attribute that we created. And now create a custom mapping for this attribute. 1 toLowerCase ( appuser . firstName ) + '_' + toLowerCase ( appuser . lastName ) + '_' + toLowerCase ( appuser . email ) Info What this means is that when users will be synced from Active Directory, Okta will take a combination of firstName + lastName + email and will populate that combination into our custom attribute verifiedIdentity . At this point we have configured everything necessary to perform verified login with claims passed from idemeum. Now we can move to the next step of configuring SAML federation between Okta and idemeum. Tip At this point you will need to force sync users from Active Directory to make sure custom attributes get populated for all your existing or new users. 3. \u2699\ufe0f Configure Okta for federation Configure 3rd party IDP Navigate to Security -> Identity Providers -> Add Identity Provider -> Add SAML 2.0 IDP Let's configure the following options. Name - assign a name to your IDP, for example idemeum SAML IDP username - create custom string for this attribute 1 String . toLowerCase ( idpuser . firstName ) + '_' + String . toLowerCase ( idpuser . lastName ) + '_' + idpuser . email Match against - choose the display name of the custom attribute your created in the previous section. Account Link Policy - choose Automatic Account Link Restriction - choose None If match not found - choose Redirect to Okta sign-in page IDP issuer URI - enter the URI that we shared with you. You will always have that available in your idemeum metadata file. IdP Single Sign-On URL - enter the URL that we shared with you. You will always have that available in your idemeum metadata file. IdP Signature Certificate - enter the certificate that we shared with you. You will always have that available in your idemeum metadata file. Request Binding - make sure you have HTTP POST selected. You can leave other parameters with default settings. Save your identity provider configuration. Return to Identity Providers section, expand the details of the identity provider you just created by clicking on the arrow next to IDP name, download metadata file and share with our support team . We will need this information to establish trust between your Okta tenant and idemeum. At this point you created identity provider in Okta to federate all authentication requests with idemeum. As a next step you need to apply this identity provider in Okta Routing Rules. Configure routing rule Navigate to Security -> Identity Providers -> Routing Rules . In this case we are going to create a new routing rule for passwordless authentication. As you can see we are keeping default configuration, but we are using our idemeum SAML identity provider for authentication. Warning Once you enable a routing rule, all authentication requests will be redirected to idemeum. If for any reason the idemeum authentication does not work, and you need to log into Okta admin account with username and password, you can always use the backdoor entry that bypasses routing rules. You can access it by using the following link https://<your Okta tenant>/login/default Tip In this case we enabled idemeum authentication for all users in Okta. If you want to configure a small group of users to try out idemeum, you can always create a special group, put your test users in that group, and assign routing rule only to this group. To do that you can use User matches configuration in the routing rule set up. It is also recommended that you customize Sign-Out page when routing rule is enabled with idemeum. To do that, navigate to Settings -> Customization , and click Edit in the Sign-Out Page section. Choose Use a custom sign-out page and enter any page, for example https://okta.com . Click Save . 4. \ud83e\uddea Test user sign-in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your Okta tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Okta application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Okta deployment with passwordless multi-factor authentication. Create an Identity Provider in Okta \u21a9 Identity Providers in Okta \u21a9 Configure routing rules in Okta \u21a9","title":"Okta"},{"location":"okta/#integrate-idemeum-with-okta","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Integrate idemeum with Okta"},{"location":"okta/#how-can-idemeum-help-secure-okta-deployments","text":"idemeum integrates with Okta directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. Verified log in idemeum has built in document verification. When integrated with Okta, idemeum can log in users not just using their email address, but also verified first name and last name, whereby making every login trusted and verified and reducing identity fraud.","title":"How can idemeum help secure Okta deployments?"},{"location":"okta/#how-does-the-integration-work","text":"idemeum integrates with Okta in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Okta tenant with idemeum over SAML protocol. In the diagram above, we see the deployment where Okta is deployed as a primary IDP and all applications are federated directly with Okta. When user is trying to authenticate to any corporate application, the sign in request is sent first to Okta, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Okta, which in turn forwards that user information to federated application. As a result users can access application without any passwords. idemeum differentiation The key difference to note here is that you can configure idemeum to release not just email, but also first name and last name for employee. When all these claims are processed for authentication, the match is done not just with email but with verified ID document information. Therefore, every login becomes trusted.","title":"How does the integration work?"},{"location":"okta/#integrate-idemeum-with-okta_1","text":"We are going to go through simple four steps to integrate idemeum with your Okta identity environment. Request idemeum tenant Set up verified login (optional) Configure Okta for federation Test user sign-in","title":"Integrate idemeum with Okta"},{"location":"okta/#1-request-idemeum-tenant","text":"\ud83d\udc49 As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Okta and whether you want to use verified login or not. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. Okta SAML IDP metadata - we will need your Okta IDP metadata file, so that we can configure SAML trust on our end. As a result, we will share the following with you: IDP issuer URI - you will need this URI to configure Okta federation with idemeum. This URI can always be extracted from your idemeum SAML metadata file. IdP Single Sign-On URL - you will need this URI to configure Okta federation with idemeum. This is the URL where Okta will send SAML requests to. IdP Signature Certificate - you will need this certificate to establish secure trust between Okta and idemeum. Tip When we provision idemeum tenant for you, your tenant's metadata XML file will be accessible using this link https://<your tenant name>/api/saml/metadata/idp.xml . All configuration parameters listed above can be extracted from this SAML metadata file.","title":"1. \ud83e\udd1d Request idemeum tenant"},{"location":"okta/#2-set-up-verified-login","text":"This step is optional. You can login your users and match the account using only email address. This is what most of the commercial identity solutions do today. However, idemeum offers an opportunity to increase identity trust and login your users with not just email, but a combination of email + firstName + lastName . To make it work, we will need to create a custom attribute for Okta users, say verifiedIdentity and populate it with a combination of email + firstName + lastName. When idemeum will return verified user claims, Okta will match them against this custom attribute. In this case we are going to be working with Active Directory users that you are synchronizing to Okta tenant. Login to your Okta tenant with admin account Navigate to Directory -> Profile editor Choose User(default) profile, click Add Attribute and create custom attribute that you will be using for user matching. In our case we are creating an attribute with the display name Verified Identity and variable name verifiedIdentity . We are not making this attribute required. Now navigate to Directory -> Profile editor and then choose your Active Directory integration and click Mappings . Scroll all the way down to find custom attribute that we created. And now create a custom mapping for this attribute. 1 toLowerCase ( appuser . firstName ) + '_' + toLowerCase ( appuser . lastName ) + '_' + toLowerCase ( appuser . email ) Info What this means is that when users will be synced from Active Directory, Okta will take a combination of firstName + lastName + email and will populate that combination into our custom attribute verifiedIdentity . At this point we have configured everything necessary to perform verified login with claims passed from idemeum. Now we can move to the next step of configuring SAML federation between Okta and idemeum. Tip At this point you will need to force sync users from Active Directory to make sure custom attributes get populated for all your existing or new users.","title":"2. \u2714\ufe0f Set up verified login"},{"location":"okta/#3-configure-okta-for-federation","text":"","title":"3. \u2699\ufe0f Configure Okta for federation"},{"location":"okta/#configure-3rd-party-idp","text":"Navigate to Security -> Identity Providers -> Add Identity Provider -> Add SAML 2.0 IDP Let's configure the following options. Name - assign a name to your IDP, for example idemeum SAML IDP username - create custom string for this attribute 1 String . toLowerCase ( idpuser . firstName ) + '_' + String . toLowerCase ( idpuser . lastName ) + '_' + idpuser . email Match against - choose the display name of the custom attribute your created in the previous section. Account Link Policy - choose Automatic Account Link Restriction - choose None If match not found - choose Redirect to Okta sign-in page IDP issuer URI - enter the URI that we shared with you. You will always have that available in your idemeum metadata file. IdP Single Sign-On URL - enter the URL that we shared with you. You will always have that available in your idemeum metadata file. IdP Signature Certificate - enter the certificate that we shared with you. You will always have that available in your idemeum metadata file. Request Binding - make sure you have HTTP POST selected. You can leave other parameters with default settings. Save your identity provider configuration. Return to Identity Providers section, expand the details of the identity provider you just created by clicking on the arrow next to IDP name, download metadata file and share with our support team . We will need this information to establish trust between your Okta tenant and idemeum. At this point you created identity provider in Okta to federate all authentication requests with idemeum. As a next step you need to apply this identity provider in Okta Routing Rules.","title":"Configure 3rd party IDP"},{"location":"okta/#configure-routing-rule","text":"Navigate to Security -> Identity Providers -> Routing Rules . In this case we are going to create a new routing rule for passwordless authentication. As you can see we are keeping default configuration, but we are using our idemeum SAML identity provider for authentication. Warning Once you enable a routing rule, all authentication requests will be redirected to idemeum. If for any reason the idemeum authentication does not work, and you need to log into Okta admin account with username and password, you can always use the backdoor entry that bypasses routing rules. You can access it by using the following link https://<your Okta tenant>/login/default Tip In this case we enabled idemeum authentication for all users in Okta. If you want to configure a small group of users to try out idemeum, you can always create a special group, put your test users in that group, and assign routing rule only to this group. To do that you can use User matches configuration in the routing rule set up. It is also recommended that you customize Sign-Out page when routing rule is enabled with idemeum. To do that, navigate to Settings -> Customization , and click Edit in the Sign-Out Page section. Choose Use a custom sign-out page and enter any page, for example https://okta.com . Click Save .","title":"Configure routing rule"},{"location":"okta/#4-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your Okta tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to Okta application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Okta deployment with passwordless multi-factor authentication. Create an Identity Provider in Okta \u21a9 Identity Providers in Okta \u21a9 Configure routing rules in Okta \u21a9","title":"4. \ud83e\uddea Test user sign-in"},{"location":"sso-overview/","text":"Enterprise Single Sign-On idemeum can also be easily integrated with Single Sign-On deployments as it supports SAML and OIDC protocols. idemeum can act as 3rd party Identity Provider to your existing SSO deployment and handle all user authentication requests. Today idemeum supports a wide range of SSO products including Okra, Azure AD (B2B), WS1 Access, and others. Typical integration would have all your SaaS or on-premises applications federated with your existing Identity Provider. And then having idemeum handle all authentication requests for your users. In this case idemeum becomes passwordless Multi Factor authentication for your users.","title":"Overview"},{"location":"sso-overview/#enterprise-single-sign-on","text":"idemeum can also be easily integrated with Single Sign-On deployments as it supports SAML and OIDC protocols. idemeum can act as 3rd party Identity Provider to your existing SSO deployment and handle all user authentication requests. Today idemeum supports a wide range of SSO products including Okra, Azure AD (B2B), WS1 Access, and others. Typical integration would have all your SaaS or on-premises applications federated with your existing Identity Provider. And then having idemeum handle all authentication requests for your users. In this case idemeum becomes passwordless Multi Factor authentication for your users.","title":"Enterprise Single Sign-On"},{"location":"ws1access/","text":"Integrate idemeum with VMware WS1 Access .embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; } How can idemeum help secure Workspace ONE deployments? idemeum integrates with Workspace ONE Access directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple. How does the integration work? idemeum integrates with Workspace ONE in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Workspace ONE appliance or SaaS tenant with idemeum over SAML protocol. Workspace ONE Access can be your primary Identity Provider or a broker. idemeum can integrate either directly with your primary identity provider, or it can integrate with Access when it is deployed as a broker. In the diagram above, we can see the deployment where WS1 Access is deployed as a primary IDP and all applications are federated directly with WS1 Access. When user is trying to authenticate to any corporate application, the sign in request is sent first to WS1 Access, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Access, which in turn forwards that user information to federated application. As a result users can access application without any passwords. Integrate idemeum with Workspace ONE Access We are going to go through simple three steps to integrate idemeum with your WS1 Access identity environment. Request idemeum tenant Configure WS1 Access for federation Test user sign-in 1. Request idemeum tenant As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Workspace ONE Access. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. WS1 Access tenant name - we will need your WS1 Access tenant name so that we can have access to your IDP metadata file, so that we can configure SAML trust on our end. As a result of tenant provisioning we will share the SAML XML metadata file URL with you that you will need to use to set up federation with WS1 Access. Tip Metadata XML file link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . 2. Configure Workspace ONE Access for federation Set idemeum as 3rd party IDP Login in to your Workspace ONE Access Tenant as an admin. Navigate to Identity & Access Management -> Identity Providers . Click Add Identity Provider -> Create SAML IDP . Add the name of your identity provider. For instance idemeum . Paste the metadata URL that you got from us when we provisioned idemeum tenant for you. Tip Metadata XML fill link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . Once the SAML metadata is processed, make sure you adjust Binding Protocol to HTTP POST . Make sure Name ID Policy in SAML Request is defined as Unspecified . Choose ALL RANGES in Network section. Create one authentication method for your IDP. In the Authentication Methods section, create name for your method and choose PasswordProtectedTransport for SAML context input field. Click Add to save IDP configuration. Apply idemeum IDP in policy configuration At this point you have configured idemeum as 3rd party identity provider for WS1 Access. What that means is that WS1 Access can now be redirecting authentication requests to idemeum using SAML protocol. What we have to do now is to apply this configuration in WS1 Access policies so that idemeum is actually used for authentication. Navigate to Identity & Access Management -> Policies . You might have different policies depending on your configuration. In this case we will be leveraging default policy set to apply idemeum configuration. We click default_access_policy_set , then click Edit . Navigate to Configuration section, and edit the rule that has Web Browser device type. This rule will be catching all authentication requests including desktop and mobile. For this rule choose Authenticate using , then select the authentication method that you created when you defined idemeum Identity Provider in the previous section. In our case that is idemeum auth . Tip You can always create a fallback rule, in case your employees are still using passwords. In that case when idemeum authentication fails for any reason, WS1 Access will fall back to using passwords to authenticate your employees. Moreover, you can create more specific authentication policy rules for iOS and Android and place them above Web Browser rule that you created. You would do that if you want to authenticate requests coming from mobile devices in a different way. But note, that idemeum supports authentication from both Mobile and Desktop, therefore going with default configuration will get you covered. 3. Test user sign in Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your WS1 Access tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to WS1 Access application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Workspace ONE deployment with passwordless multi-factor authentication. WS1 Access VMWare page \u21a9 Configure 3rd party IDP for WS1 Access \u21a9","title":"Worspace ONE Access"},{"location":"ws1access/#integrate-idemeum-with-vmware-ws1-access","text":".embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }","title":"Integrate idemeum with VMware WS1 Access"},{"location":"ws1access/#how-can-idemeum-help-secure-workspace-one-deployments","text":"idemeum integrates with Workspace ONE Access directly over SAML and provides the following services: Service Description Passwordless MFA Eliminate passwords when users access your SSO applications. No enrollment, no user sync, easy and simple.","title":"How can idemeum help secure Workspace ONE deployments?"},{"location":"ws1access/#how-does-the-integration-work","text":"idemeum integrates with Workspace ONE in minutes. As idemeum is decentralized, there is no need to synchronize users to idemeum from Active Directory, or deploy any additional servers and connectors. Simply federate your Workspace ONE appliance or SaaS tenant with idemeum over SAML protocol. Workspace ONE Access can be your primary Identity Provider or a broker. idemeum can integrate either directly with your primary identity provider, or it can integrate with Access when it is deployed as a broker. In the diagram above, we can see the deployment where WS1 Access is deployed as a primary IDP and all applications are federated directly with WS1 Access. When user is trying to authenticate to any corporate application, the sign in request is sent first to WS1 Access, and is then subsequently redirected to idemeum. idemeum performs Passwordless Multi-Factor authentication and returns necessary user information to Access, which in turn forwards that user information to federated application. As a result users can access application without any passwords.","title":"How does the integration work?"},{"location":"ws1access/#integrate-idemeum-with-workspace-one-access","text":"We are going to go through simple three steps to integrate idemeum with your WS1 Access identity environment. Request idemeum tenant Configure WS1 Access for federation Test user sign-in","title":"Integrate idemeum with Workspace ONE Access"},{"location":"ws1access/#1-request-idemeum-tenant","text":"As a first step, reach out to idemeum team at support@idemeum.com with the request to provision idemeum tenant. Please, let us know that you will be integrating idemeum with Workspace ONE Access. We will need several things from you: Preferred tenant name - we will provision a tenant name for you based on your preferences. The tenant name will be in the form of <your company>.idemeum.com . Company logo - share your company logo with us so that we can display it on every login page request as well as in the application, when users log into your company resources. We will need the image in the png or jpeg format. WS1 Access tenant name - we will need your WS1 Access tenant name so that we can have access to your IDP metadata file, so that we can configure SAML trust on our end. As a result of tenant provisioning we will share the SAML XML metadata file URL with you that you will need to use to set up federation with WS1 Access. Tip Metadata XML file link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml .","title":"1. Request idemeum tenant"},{"location":"ws1access/#2-configure-workspace-one-access-for-federation","text":"","title":"2. Configure Workspace ONE Access for federation"},{"location":"ws1access/#set-idemeum-as-3rd-party-idp","text":"Login in to your Workspace ONE Access Tenant as an admin. Navigate to Identity & Access Management -> Identity Providers . Click Add Identity Provider -> Create SAML IDP . Add the name of your identity provider. For instance idemeum . Paste the metadata URL that you got from us when we provisioned idemeum tenant for you. Tip Metadata XML fill link will have the following format https://<your tenant name>/api/saml/metadata/idp.xml . Once the SAML metadata is processed, make sure you adjust Binding Protocol to HTTP POST . Make sure Name ID Policy in SAML Request is defined as Unspecified . Choose ALL RANGES in Network section. Create one authentication method for your IDP. In the Authentication Methods section, create name for your method and choose PasswordProtectedTransport for SAML context input field. Click Add to save IDP configuration.","title":"Set idemeum as 3rd party IDP"},{"location":"ws1access/#apply-idemeum-idp-in-policy-configuration","text":"At this point you have configured idemeum as 3rd party identity provider for WS1 Access. What that means is that WS1 Access can now be redirecting authentication requests to idemeum using SAML protocol. What we have to do now is to apply this configuration in WS1 Access policies so that idemeum is actually used for authentication. Navigate to Identity & Access Management -> Policies . You might have different policies depending on your configuration. In this case we will be leveraging default policy set to apply idemeum configuration. We click default_access_policy_set , then click Edit . Navigate to Configuration section, and edit the rule that has Web Browser device type. This rule will be catching all authentication requests including desktop and mobile. For this rule choose Authenticate using , then select the authentication method that you created when you defined idemeum Identity Provider in the previous section. In our case that is idemeum auth . Tip You can always create a fallback rule, in case your employees are still using passwords. In that case when idemeum authentication fails for any reason, WS1 Access will fall back to using passwords to authenticate your employees. Moreover, you can create more specific authentication policy rules for iOS and Android and place them above Web Browser rule that you created. You would do that if you want to authenticate requests coming from mobile devices in a different way. But note, that idemeum supports authentication from both Mobile and Desktop, therefore going with default configuration will get you covered.","title":"Apply idemeum IDP in policy configuration"},{"location":"ws1access/#3-test-user-sign-in","text":"Once you are done with configuration you can quickly test the user sign-in flow. Open incognito browser window and navigate to your WS1 Access tenant URL. Once you do that you will be redirected to idemeum for login. You will see the QR code that you will need to scan with the idemeum application. Once you scan the QR code with idemeum application and approve the sign in, you will be redirected to WS1 Access application catalog. \ud83c\udf89 Congratulations! You have successfully integrated idemeum and protected your Workspace ONE deployment with passwordless multi-factor authentication. WS1 Access VMWare page \u21a9 Configure 3rd party IDP for WS1 Access \u21a9","title":"3. Test user sign in"},{"location":"overview/architecture/","text":"Coming soon","title":"idemeum architecture"},{"location":"overview/architecture/#coming-soon","text":"","title":"Coming soon"},{"location":"overview/biometric/","text":"Coming soon","title":"Biometric login"},{"location":"overview/biometric/#coming-soon","text":"","title":"Coming soon"},{"location":"overview/flowcomparison/","text":"Coming soon 1 2 3 theme: palette: scheme: slate","title":"Login flows comparison"},{"location":"overview/flowcomparison/#coming-soon","text":"1 2 3 theme: palette: scheme: slate","title":"Coming soon"},{"location":"overview/loginapp/","text":"Coming soon","title":"idemeum app login"},{"location":"overview/loginapp/#coming-soon","text":"","title":"Coming soon"},{"location":"overview/oneclick/","text":"One-Click Login One-click login is the simplest and most intuitive authentication flow for your users. It introduces very little friction, as all users need to do is to click a button to login. How One-Click works Behind the scenes one-click login is using JSON Web Tokens (JWT) to authenticate users. What is JWT? JSON Web Token (JWT) is an open standard ( RFC 7519 ) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. Once the user is authenticated, idemeum returns a JSON Web Token that will be saved locally in the user's browser as a cookie. Each subsequent request will include the JWT, allowing the user to access any application that supports idemeum passwordless login. JWT enables users to Single Sign-On across applications - it provides small overhead and can be used across domains. This is a stateless authentication mechanism as the user state is never saved in the idemeum backend. JWT points to a DID , which is unique for each user, and does not include any identity information. After the user validates his identity and presents his JWT to idemeum backend, she can access identity claims and privately share with the target application. More about security and privacy User lifecycle When a user is logging into an application with idemeum passwordless login for the first time, she will need to go through registration process. When a user already logged in into any app with idemeum passwordless login, she will have a JWT present as cookie in the browser, and she will be able to seamlessly authenticate to any app with one-click. Let's get deeper into each of the flows. 1. Registration User registration is very simple - it requires validating the ownership of an email address with the one-time code. When user logs in to your application, he is presented with a passwordless login form. Upon providing an email address, idemeum will send a one-time code to users' inbox. That code needs to be typed back in order to prove email ownership. Once registration is complete, idemeum user account is created, Decentralized Identifier (DID) is assigned to the user, and JWT token is saved as a cookie in the user's browser. User identity claims are encrypted by the user generated private key and are stored in a dedicated HSM protected area of idemeum cloud. Only users have access to their identity data. Note Registration flow will be executed in the following cases: User never used idemeum passwordless login before User is using a new browser / or the cookies have been cleared from the browser idemeum session is expired and user needs to prove email ownership again 2. Authentication Once the user completes the registration, the authentication step is very simple. Click a button, confirm the release of information, and you are in. As idemeum is a private IDP, users will be able to Single-Sign On across applications and domains.","title":"One-click login"},{"location":"overview/oneclick/#one-click-login","text":"One-click login is the simplest and most intuitive authentication flow for your users. It introduces very little friction, as all users need to do is to click a button to login.","title":"One-Click Login"},{"location":"overview/oneclick/#how-one-click-works","text":"Behind the scenes one-click login is using JSON Web Tokens (JWT) to authenticate users. What is JWT? JSON Web Token (JWT) is an open standard ( RFC 7519 ) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. Once the user is authenticated, idemeum returns a JSON Web Token that will be saved locally in the user's browser as a cookie. Each subsequent request will include the JWT, allowing the user to access any application that supports idemeum passwordless login. JWT enables users to Single Sign-On across applications - it provides small overhead and can be used across domains. This is a stateless authentication mechanism as the user state is never saved in the idemeum backend. JWT points to a DID , which is unique for each user, and does not include any identity information. After the user validates his identity and presents his JWT to idemeum backend, she can access identity claims and privately share with the target application. More about security and privacy","title":"How One-Click works"},{"location":"overview/oneclick/#user-lifecycle","text":"When a user is logging into an application with idemeum passwordless login for the first time, she will need to go through registration process. When a user already logged in into any app with idemeum passwordless login, she will have a JWT present as cookie in the browser, and she will be able to seamlessly authenticate to any app with one-click. Let's get deeper into each of the flows.","title":"User lifecycle"},{"location":"overview/oneclick/#1-registration","text":"User registration is very simple - it requires validating the ownership of an email address with the one-time code. When user logs in to your application, he is presented with a passwordless login form. Upon providing an email address, idemeum will send a one-time code to users' inbox. That code needs to be typed back in order to prove email ownership. Once registration is complete, idemeum user account is created, Decentralized Identifier (DID) is assigned to the user, and JWT token is saved as a cookie in the user's browser. User identity claims are encrypted by the user generated private key and are stored in a dedicated HSM protected area of idemeum cloud. Only users have access to their identity data. Note Registration flow will be executed in the following cases: User never used idemeum passwordless login before User is using a new browser / or the cookies have been cleared from the browser idemeum session is expired and user needs to prove email ownership again","title":"1. Registration"},{"location":"overview/oneclick/#2-authentication","text":"Once the user completes the registration, the authentication step is very simple. Click a button, confirm the release of information, and you are in. As idemeum is a private IDP, users will be able to Single-Sign On across applications and domains.","title":"2. Authentication"},{"location":"overview/privacy/","text":"idemeum makes digital identity private Here at idemeum we made user data privacy and security part of our DNA. That is why we designed and built Privacy-aware Identity Management Architecture . This is our secret sauce that allows you to offer your users identity privacy and data protection with modern security controls. Let's dig deeper into how exactly idemeum offers digital identity privacy and security. How idemeum enables identity privacy Here at idemeum we find this definition of privacy helpful: Definition Privacy is an individual's claim to control the terms under which personal information \u2014 information identifiable to the individual \u2014 is acquired , disclosed , and used . Let's see how idemeum handles data acquisition, disclosure, and usage. Data acquisition Our philosophy here is to give users a choice for how and where they want their data to be persisted: When users login with one-click login or biometric login , their identity information will be collected, verified and persisted privately in our cloud . Digital identity data will be encrypted, and idemeum will not have appropriate permissions to decrypt it. That means users will control and own their digital identity data. When users choose to use idemeum mobile app , their identity information will be collected, verified and persisted privately only on user's mobile devices . No personal information that users create in the app will be stored in our cloud. What is more, idemeum is architected to only work with declared data - data that was willingly shared by users. When users create idemeum profile they would typically provide first-name, last-name, email address and phone number. This is the only type of personal data that will be persisted. idemeum does not create or work with any inferred data - data developed around users without their input. Data disclosure Our guiding principles here are transparency and control . Users have complete transparency into their identity data through user cabinet . For idemeum mobile app, user cabinet is managed in the mobile app. For web-based login flows (one-click and biometric), the user cabinet is managed in the cloud. At any time users can navigate to their idemeum cabinet and see what profile they have with idemeum and what identity information is maintained. Any identity claim (whether that is email, phone number, or name) can be updated or removed entirely at any time. And most importantly, users have control over who and how their digital identity data is shared with. The whole purpose of persisting users' information is to provide seamless Single Sign-On across applications. Every time users go through the login process they are presented with a consent screen , so that users can choose and pick what data they want to share with the target application. Users' digital identity data is not disclosed to any third parties for any purpose without user consent. Data use We follow the principles of data minimization and purpose limitation . Users' digital identity data is used for only one purpose - log users into applications they choose to. And the data is only collected to the extent necessary to log users successfully into a target application. Digital identity data is not used for any other purposes, including advertising, sharing with third parties, or monetization purposes.","title":"On privacy"},{"location":"overview/privacy/#idemeum-makes-digital-identity-private","text":"Here at idemeum we made user data privacy and security part of our DNA. That is why we designed and built Privacy-aware Identity Management Architecture . This is our secret sauce that allows you to offer your users identity privacy and data protection with modern security controls. Let's dig deeper into how exactly idemeum offers digital identity privacy and security.","title":"idemeum makes digital identity private"},{"location":"overview/privacy/#how-idemeum-enables-identity-privacy","text":"Here at idemeum we find this definition of privacy helpful: Definition Privacy is an individual's claim to control the terms under which personal information \u2014 information identifiable to the individual \u2014 is acquired , disclosed , and used . Let's see how idemeum handles data acquisition, disclosure, and usage.","title":"How idemeum enables identity privacy"},{"location":"overview/privacy/#data-acquisition","text":"Our philosophy here is to give users a choice for how and where they want their data to be persisted: When users login with one-click login or biometric login , their identity information will be collected, verified and persisted privately in our cloud . Digital identity data will be encrypted, and idemeum will not have appropriate permissions to decrypt it. That means users will control and own their digital identity data. When users choose to use idemeum mobile app , their identity information will be collected, verified and persisted privately only on user's mobile devices . No personal information that users create in the app will be stored in our cloud. What is more, idemeum is architected to only work with declared data - data that was willingly shared by users. When users create idemeum profile they would typically provide first-name, last-name, email address and phone number. This is the only type of personal data that will be persisted. idemeum does not create or work with any inferred data - data developed around users without their input.","title":"Data acquisition"},{"location":"overview/privacy/#data-disclosure","text":"Our guiding principles here are transparency and control . Users have complete transparency into their identity data through user cabinet . For idemeum mobile app, user cabinet is managed in the mobile app. For web-based login flows (one-click and biometric), the user cabinet is managed in the cloud. At any time users can navigate to their idemeum cabinet and see what profile they have with idemeum and what identity information is maintained. Any identity claim (whether that is email, phone number, or name) can be updated or removed entirely at any time. And most importantly, users have control over who and how their digital identity data is shared with. The whole purpose of persisting users' information is to provide seamless Single Sign-On across applications. Every time users go through the login process they are presented with a consent screen , so that users can choose and pick what data they want to share with the target application. Users' digital identity data is not disclosed to any third parties for any purpose without user consent.","title":"Data disclosure"},{"location":"overview/privacy/#data-use","text":"We follow the principles of data minimization and purpose limitation . Users' digital identity data is used for only one purpose - log users into applications they choose to. And the data is only collected to the extent necessary to log users successfully into a target application. Digital identity data is not used for any other purposes, including advertising, sharing with third parties, or monetization purposes.","title":"Data use"},{"location":"overview/security/","text":"idemeum makes digital identity secure idemeum offers three types of login: one-click login , login with biometrics , and login with idemeum app . Let's dig deeper into how each flow is secured with Privacy-aware Identity Management Architecture. One-click or biometric login There are four major architectural components that enable idemeum login. Each component carries a certain role with a number of security protections built-in. Client-side SDK - interface for integrating idemeum login flows into a website or mobile app. SDK orchestrates idemeum end-to-end flows including login initiation, token handling, and returning the control back to the website or mobile app. Web client - angular-based single page application that verifies user claims, performs one-click or biometric (FIDO2) login, and manages user decentralized identity (DID). Identity Provider (IDP) - cloud service responsible for AWS identity federation using SAML 2.0 standards and acquiring temporary, limited-privilege credentials for the authenticated user. These credentials are used by the web client to directly interact with AWS key management service for data security. Key Management Service (KMS) \ud83d\udd11 - AWS managed service that makes it easy to create and control idemeum master key (CMK), and data encryption keys (DEK) used to encrypt user claims. AWS KMS CMKs are protected by hardware security modules (HSMs) that are validated by the FIPS 140-2 Cryptographic Module Validation Program. Let's now get deep into each of the components to get the details about security controls. Client-side SDK When integrating with idemeum each application gets CLIENT_ID assigned so that it can interact with idemeum backend. Since CLIENT_ID is used in the front-end code, it may be exposed. Therefore, to prevent malicious applications impersonation and phishing, application owners can set the Allowed Origins (whitelisted domains) that are allowed to use the CLIENT_ID. SKD also offers application developers to validate OIDC ID token in two ways: front-end validation (in SDK code) or redirect to endpoint (provided by application developer to point to the backend endpoint). Token validation verifies standard claims like issuer, audience, expiration, issue time. It also validates the signature of the ID Token according to JWS using the algorithm specified in the JWT alg Header Parameter. The nonce value is also checked to mitigate replay attack. Web client Secure login strongbox - login flow is implemented in a dedicated strongbox that is protected by short-term challenge and browser context (fingerprint). This prevents any part of the flow to be executed outside of the strongbox and mitigates phishing and replay attacks. The fingerprint is also associated with the DID JWT and hence protects against DID cookie stealing and replay attack. Signed and Encrypted DID JWT cookie - authenticated user session is represented as a DID JWT and saved as a cookie in the browser. This JWT is signed and encrypted to protect the integrity and confidentiality of the users' DID. Encryption SDK - encryption SDK is a client-side encryption library designed to make it easy to encrypt and decrypt users claims using industry standards and best practices. This client-side encryption in browser works directly in conjunction with the AWS key management service. idemeum cloud is not involved in the process and has no control of the data encryption keys used to encrypt the claims. SDK is built on security concepts like envelope encryption, key commitment, data key cache and symmetric cryptography. Encrypted message and algorithm suite - users' claims are packaged into a portable formatted data structure called encrypted message, which includes encrypted data along with encrypted copies of the DEK keys, the algorithm ID, and an encryption context and a message signature. Encrypted message is securely persisted in the cloud. The idemeum cloud does not have access control to decrypt the data keys. The default algorithm suite is AES-GCM with an HMAC-based extract-and-expand key derivation function (HKDF), Elliptic Curve Digital Signature Algorithm (ECDSA) signing, and a 256-bit encryption key. Authenticated encryption with additional data (AEAD) - non-secret data that is provided to encryption and decryption operations to add an additional integrity and authenticity check on the encrypted data. Typically, the decrypt operation fails if the AAD (additional authenticated data) provided to the encrypt operation does not match the AAD provided to the decrypt operation. Identity Provider (IDP) The idemeum IDP is responsible for authenticating user and requesting temporary, limited-privilege credentials from the AWS Security Token Service (AWS STS). This is done to create and provide trusted users with temporary security credentials that can control access to key management service. Access to key management service is required to encrypt and decrypt user claims by the encryption SDK in the idemeum web client as explained in the previous section. To use idemeum IDP, the first thing we do is to create an IAM identity provider entity to establish a trust relationship between the AWS account and the idemeum IDP. The trust is established using SAML 2.0 standards. At login time, the idemeum IDP creates a SAML assertion (as part of the authentication response) that is used to get the temporary security credentials from AWS STS. These credentials are generated dynamically when requested and are limited-privilege and short-term, as the name implies. Key management service \ud83d\udd11 The data in AWS KMS consists of idemeum customer master key (CMK) and the encryption key material they represent. This key material exists in plaintext only within AWS KMS hardware security modules (HSMs) and only when in use. AWS KMS generates key material for idemeum customer master key (CMK) in FIPS 140-2 Level 2\u2013compliant hardware security modules (HSMs). When not in use, key material is encrypted by an HSM and written to durable, persistent storage. The key material for CMK and the encryption keys that protect the key material never leave the HSMs in plaintext form. The CMK is used by the encryption SDK to encrypt and decrypt data encryption keys (DEK's) that are used to encrypt and decrypt user claims. Since all the encryption operations happen in the web client, idemeum cloud does not have the appropriate permissions to decrypt the DEK\u2019s The access to the CMK is managed using key policy. The key policy does specify a specific role that should be assumed by temporary credentials in order to access the CMK. Access to CMK is also controlled by ABAC (attribute-based access control) and policy conditions that should be met before performing encryption operations. Login with idemeum app We created idemeum app (decentralized, verified, mobile identity) with the purpose to enable people to own and control their digital identity 100%. idemeum app is decentralized, meaning no user information ( correct, absolutely no personally identifiable information (PII) ) is persisted in the cloud when idemeum app is set up. All identity claims are securely stored on a mobile device. Decentralized Identifier (DID) In the idemeum app user DID is secured using public-key cryptography, where DID private key is managed in the secure hardware, such as Trusted Execution Environment (TEE) and dedicated Hardware Security Module (HSM). Biometric Support idemeum app uses FIDO2 standards for supporting platform and roaming authenticators for user registration and authentication. Biometric validation is enforced when user logins into any service provider and also when managing the user cabinet. Verified and Encrypted Claims Users manage their identity claims in the idemeum app. The claims (first name, last name, address, email, phone, and others) are identity proofed to ensure that claimed identity matches the actual identity. The claims are secured using symmetric cryptography where key material is managed in the TEE and HSM.","title":"On security"},{"location":"overview/security/#idemeum-makes-digital-identity-secure","text":"idemeum offers three types of login: one-click login , login with biometrics , and login with idemeum app . Let's dig deeper into how each flow is secured with Privacy-aware Identity Management Architecture.","title":"idemeum makes digital identity secure"},{"location":"overview/security/#one-click-or-biometric-login","text":"There are four major architectural components that enable idemeum login. Each component carries a certain role with a number of security protections built-in. Client-side SDK - interface for integrating idemeum login flows into a website or mobile app. SDK orchestrates idemeum end-to-end flows including login initiation, token handling, and returning the control back to the website or mobile app. Web client - angular-based single page application that verifies user claims, performs one-click or biometric (FIDO2) login, and manages user decentralized identity (DID). Identity Provider (IDP) - cloud service responsible for AWS identity federation using SAML 2.0 standards and acquiring temporary, limited-privilege credentials for the authenticated user. These credentials are used by the web client to directly interact with AWS key management service for data security. Key Management Service (KMS) \ud83d\udd11 - AWS managed service that makes it easy to create and control idemeum master key (CMK), and data encryption keys (DEK) used to encrypt user claims. AWS KMS CMKs are protected by hardware security modules (HSMs) that are validated by the FIPS 140-2 Cryptographic Module Validation Program. Let's now get deep into each of the components to get the details about security controls.","title":"One-click or biometric login"},{"location":"overview/security/#client-side-sdk","text":"When integrating with idemeum each application gets CLIENT_ID assigned so that it can interact with idemeum backend. Since CLIENT_ID is used in the front-end code, it may be exposed. Therefore, to prevent malicious applications impersonation and phishing, application owners can set the Allowed Origins (whitelisted domains) that are allowed to use the CLIENT_ID. SKD also offers application developers to validate OIDC ID token in two ways: front-end validation (in SDK code) or redirect to endpoint (provided by application developer to point to the backend endpoint). Token validation verifies standard claims like issuer, audience, expiration, issue time. It also validates the signature of the ID Token according to JWS using the algorithm specified in the JWT alg Header Parameter. The nonce value is also checked to mitigate replay attack.","title":"Client-side SDK"},{"location":"overview/security/#web-client","text":"Secure login strongbox - login flow is implemented in a dedicated strongbox that is protected by short-term challenge and browser context (fingerprint). This prevents any part of the flow to be executed outside of the strongbox and mitigates phishing and replay attacks. The fingerprint is also associated with the DID JWT and hence protects against DID cookie stealing and replay attack. Signed and Encrypted DID JWT cookie - authenticated user session is represented as a DID JWT and saved as a cookie in the browser. This JWT is signed and encrypted to protect the integrity and confidentiality of the users' DID. Encryption SDK - encryption SDK is a client-side encryption library designed to make it easy to encrypt and decrypt users claims using industry standards and best practices. This client-side encryption in browser works directly in conjunction with the AWS key management service. idemeum cloud is not involved in the process and has no control of the data encryption keys used to encrypt the claims. SDK is built on security concepts like envelope encryption, key commitment, data key cache and symmetric cryptography. Encrypted message and algorithm suite - users' claims are packaged into a portable formatted data structure called encrypted message, which includes encrypted data along with encrypted copies of the DEK keys, the algorithm ID, and an encryption context and a message signature. Encrypted message is securely persisted in the cloud. The idemeum cloud does not have access control to decrypt the data keys. The default algorithm suite is AES-GCM with an HMAC-based extract-and-expand key derivation function (HKDF), Elliptic Curve Digital Signature Algorithm (ECDSA) signing, and a 256-bit encryption key. Authenticated encryption with additional data (AEAD) - non-secret data that is provided to encryption and decryption operations to add an additional integrity and authenticity check on the encrypted data. Typically, the decrypt operation fails if the AAD (additional authenticated data) provided to the encrypt operation does not match the AAD provided to the decrypt operation.","title":"Web client"},{"location":"overview/security/#identity-provider-idp","text":"The idemeum IDP is responsible for authenticating user and requesting temporary, limited-privilege credentials from the AWS Security Token Service (AWS STS). This is done to create and provide trusted users with temporary security credentials that can control access to key management service. Access to key management service is required to encrypt and decrypt user claims by the encryption SDK in the idemeum web client as explained in the previous section. To use idemeum IDP, the first thing we do is to create an IAM identity provider entity to establish a trust relationship between the AWS account and the idemeum IDP. The trust is established using SAML 2.0 standards. At login time, the idemeum IDP creates a SAML assertion (as part of the authentication response) that is used to get the temporary security credentials from AWS STS. These credentials are generated dynamically when requested and are limited-privilege and short-term, as the name implies.","title":"Identity Provider (IDP)"},{"location":"overview/security/#key-management-service","text":"The data in AWS KMS consists of idemeum customer master key (CMK) and the encryption key material they represent. This key material exists in plaintext only within AWS KMS hardware security modules (HSMs) and only when in use. AWS KMS generates key material for idemeum customer master key (CMK) in FIPS 140-2 Level 2\u2013compliant hardware security modules (HSMs). When not in use, key material is encrypted by an HSM and written to durable, persistent storage. The key material for CMK and the encryption keys that protect the key material never leave the HSMs in plaintext form. The CMK is used by the encryption SDK to encrypt and decrypt data encryption keys (DEK's) that are used to encrypt and decrypt user claims. Since all the encryption operations happen in the web client, idemeum cloud does not have the appropriate permissions to decrypt the DEK\u2019s The access to the CMK is managed using key policy. The key policy does specify a specific role that should be assumed by temporary credentials in order to access the CMK. Access to CMK is also controlled by ABAC (attribute-based access control) and policy conditions that should be met before performing encryption operations.","title":"Key management service \ud83d\udd11"},{"location":"overview/security/#login-with-idemeum-app","text":"We created idemeum app (decentralized, verified, mobile identity) with the purpose to enable people to own and control their digital identity 100%. idemeum app is decentralized, meaning no user information ( correct, absolutely no personally identifiable information (PII) ) is persisted in the cloud when idemeum app is set up. All identity claims are securely stored on a mobile device.","title":"Login with idemeum app"},{"location":"overview/security/#decentralized-identifier-did","text":"In the idemeum app user DID is secured using public-key cryptography, where DID private key is managed in the secure hardware, such as Trusted Execution Environment (TEE) and dedicated Hardware Security Module (HSM).","title":"Decentralized Identifier (DID)"},{"location":"overview/security/#biometric-support","text":"idemeum app uses FIDO2 standards for supporting platform and roaming authenticators for user registration and authentication. Biometric validation is enforced when user logins into any service provider and also when managing the user cabinet.","title":"Biometric Support"},{"location":"overview/security/#verified-and-encrypted-claims","text":"Users manage their identity claims in the idemeum app. The claims (first name, last name, address, email, phone, and others) are identity proofed to ensure that claimed identity matches the actual identity. The claims are secured using symmetric cryptography where key material is managed in the TEE and HSM.","title":"Verified and Encrypted Claims"},{"location":"reference/appandroid/","text":"Coming soon","title":"Sample app"},{"location":"reference/appandroid/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/appios/","text":"Coming soon","title":"Sample app"},{"location":"reference/appios/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/appjs/","text":"Coming soon","title":"Sample app"},{"location":"reference/appjs/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/howtoandroid/","text":"Coming soon","title":"How to guide"},{"location":"reference/howtoandroid/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/howtoios/","text":"Coming soon","title":"How to guide"},{"location":"reference/howtoios/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/howtojs/","text":"Coming soon","title":"How to guide"},{"location":"reference/howtojs/#coming-soon","text":"","title":"Coming soon"},{"location":"reference/sdkoverview/","text":"Coming soon","title":"Overview"},{"location":"reference/sdkoverview/#coming-soon","text":"","title":"Coming soon"}]}